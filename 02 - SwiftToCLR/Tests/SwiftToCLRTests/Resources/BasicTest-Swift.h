// Generated by compnerd.org Swift version 5.11-dev (LLVM 13124099c3f0229, Swift f08f86c71617bac)
#ifndef BASICTEST_SWIFT_H
#define BASICTEST_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X)
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X)
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X)
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BasicTest",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
// Allow user to find the header using additional include paths
#if __has_include(<swiftToCxx/_SwiftCxxInteroperability.h>)
#include <swiftToCxx/_SwiftCxxInteroperability.h>
// Look for the C++ interop support header relative to clang's resource dir:
//  '<toolchain>/usr/lib/clang/<version>/include/../../../swift/swiftToCxx'.
#elif __has_include(<../../../swift/swiftToCxx/_SwiftCxxInteroperability.h>)
#include <../../../swift/swiftToCxx/_SwiftCxxInteroperability.h>
#elif __has_include(<../../../../../lib/swift/swiftToCxx/_SwiftCxxInteroperability.h>)
//  '<toolchain>/usr/local/lib/clang/<version>/include/../../../../../lib/swift/swiftToCxx'.
#include <../../../../../lib/swift/swiftToCxx/_SwiftCxxInteroperability.h>
#endif
#pragma clang diagnostic pop
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
#endif

#ifndef SWIFT_SWIFT_H
#define SWIFT_SWIFT_H
#ifdef SWIFT_SYMBOL
#undef SWIFT_SYMBOL
#endif
#define SWIFT_SYMBOL(usrValue) SWIFT_SYMBOL_MODULE_USR("swift", usrValue)
#ifndef SWIFT_CXX_INTEROP_HIDE_STL_OVERLAY
#include <string>
#endif
#include <new>
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"
#ifndef SWIFT_PRINTED_CORE
#define SWIFT_PRINTED_CORE
namespace swift SWIFT_PRIVATE_ATTR {

namespace _impl {

#ifdef __cplusplus
extern "C" {
#endif

// Swift type metadata response type.
struct MetadataResponseTy {
  void * _Null_unspecified _0;
  uint64_t _1;
};
// Swift type metadata request type.
typedef uint64_t MetadataRequestTy;

#if __cplusplus > 201402L
#  define SWIFT_NOEXCEPT_FUNCTION_PTR noexcept
#else
#  define SWIFT_NOEXCEPT_FUNCTION_PTR
#endif

using ValueWitnessInitializeBufferWithCopyOfBufferTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(55882))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessDestroyTy = void(* __ptrauth_swift_value_witness_function_pointer(1272))(void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessInitializeWithCopyTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(58298))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessAssignWithCopyTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(34641))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessInitializeWithTakeTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(18648))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessAssignWithTakeTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(61402))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessGetEnumTagSinglePayloadTy = unsigned(* __ptrauth_swift_value_witness_function_pointer(24816))(const void * _Nonnull, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessStoreEnumTagSinglePayloadTy = void(* __ptrauth_swift_value_witness_function_pointer(41169))(void * _Nonnull, unsigned, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;

struct ValueWitnessTable {
  ValueWitnessInitializeBufferWithCopyOfBufferTy _Nonnull initializeBufferWithCopyOfBuffer;
  ValueWitnessDestroyTy _Nonnull destroy;
  ValueWitnessInitializeWithCopyTy _Nonnull initializeWithCopy;
  ValueWitnessAssignWithCopyTy _Nonnull assignWithCopy;
  ValueWitnessInitializeWithTakeTy _Nonnull initializeWithTake;
  ValueWitnessAssignWithTakeTy _Nonnull assignWithTake;
  ValueWitnessGetEnumTagSinglePayloadTy _Nonnull getEnumTagSinglePayload;
  ValueWitnessStoreEnumTagSinglePayloadTy _Nonnull storeEnumTagSinglePayload;
  size_t size;
  size_t stride;
  unsigned flags;
  unsigned extraInhabitantCount;

  constexpr size_t getAlignment() const { return (flags & 255) + 1; }
};

using EnumValueWitnessGetEnumTagTy = unsigned(* __ptrauth_swift_value_witness_function_pointer(41909))(const void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using EnumValueWitnessDestructiveProjectEnumDataTy = void(* __ptrauth_swift_value_witness_function_pointer(1053))(void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using EnumValueWitnessDestructiveInjectEnumTagTy = void(* __ptrauth_swift_value_witness_function_pointer(45796))(void * _Nonnull, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;

struct EnumValueWitnessTable {
  ValueWitnessTable vwTable;
  EnumValueWitnessGetEnumTagTy _Nonnull getEnumTag;
  EnumValueWitnessDestructiveProjectEnumDataTy _Nonnull destructiveProjectEnumData;
  EnumValueWitnessDestructiveInjectEnumTagTy _Nonnull destructiveInjectEnumTag;
};

#undef SWIFT_NOEXCEPT_FUNCTION_PTR


// type metadata address for Bool.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSbN;
// type metadata address for Int8.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss4Int8VN;
// type metadata address for UInt8.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5UInt8VN;
// type metadata address for Int16.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int16VN;
// type metadata address for UInt16.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt16VN;
// type metadata address for Int32.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int32VN;
// type metadata address for UInt32.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt32VN;
// type metadata address for Int64.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int64VN;
// type metadata address for UInt64.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt64VN;
// type metadata address for Float.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSfN;
// type metadata address for Double.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSdN;
// type metadata address for OpaquePointer.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss13OpaquePointerVN;

#ifdef __cplusplus
}
#endif


} // namespace _impl


#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<bool> = true;

template<>
struct TypeMetadataTrait<bool> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSbN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int8_t> = true;

template<>
struct TypeMetadataTrait<int8_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss4Int8VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint8_t> = true;

template<>
struct TypeMetadataTrait<uint8_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5UInt8VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int16_t> = true;

template<>
struct TypeMetadataTrait<int16_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int16VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint16_t> = true;

template<>
struct TypeMetadataTrait<uint16_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt16VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int32_t> = true;

template<>
struct TypeMetadataTrait<int32_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int32VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint32_t> = true;

template<>
struct TypeMetadataTrait<uint32_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt32VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int64_t> = true;

template<>
struct TypeMetadataTrait<int64_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int64VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint64_t> = true;

template<>
struct TypeMetadataTrait<uint64_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt64VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<float> = true;

template<>
struct TypeMetadataTrait<float> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSfN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<double> = true;

template<>
struct TypeMetadataTrait<double> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSdN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<void *> = true;

template<>
struct TypeMetadataTrait<void *> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss13OpaquePointerVN;
  }
};

#pragma clang diagnostic pop

} // namespace swift

#endif
#ifdef __cplusplus
namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
namespace _impl {
extern "C" {
#endif

// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_void_ptr_0_8 {
  void * _Nullable _1;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_void_ptr_0_8(char * _Nonnull result, struct swift_interop_returnStub_swift_void_ptr_0_8 value) {
  memcpy(result + 0, &value._1, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_void_ptr_0_8 $sS2ayxGycfC(void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // init()
SWIFT_EXTERN struct swift_interop_returnStub_swift_void_ptr_0_8 $sSa9repeating5countSayxGx_SitcfC(const void * _Nonnull repeatedValue, ptrdiff_t count, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // init(repeating:count:)
SWIFT_EXTERN void $sSa15reserveCapacityyySiF(ptrdiff_t minimumCapacity, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // reserveCapacity(_:)
SWIFT_EXTERN void $sSa6appendyyxnF(const void * _Nonnull newElement, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // append(_:)
SWIFT_EXTERN void $sSa17_customRemoveLastxSgyF(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _customRemoveLast()
SWIFT_EXTERN void $sSa6remove2atxSi_tF(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t index, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // remove(at:)
SWIFT_EXTERN void $sSa6insert_2atyxn_SitF(const void * _Nonnull newElement, ptrdiff_t i, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // insert(_:at:)
SWIFT_EXTERN void $sSa9removeAll15keepingCapacityySb_tF(bool keepCapacity, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // removeAll(keepingCapacity:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_swift_void_ptr_0_8 {
  void * _Nullable _1;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_swift_void_ptr_0_8 swift_interop_passDirect_swift_void_ptr_0_8(const char * _Nonnull value) {
  struct swift_interop_passStub_swift_void_ptr_0_8 result;
  memcpy(&result._1, value + 0, 8);
  return result;
}

SWIFT_EXTERN ptrdiff_t $sSa10startIndexSivg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSa8endIndexSivg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSa8distance4from2toS2i_SitF(ptrdiff_t start, ptrdiff_t end, struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // distance(from:to:)
SWIFT_EXTERN void $sSayxSicig(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t index, struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSa5countSivg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $sSa29_hoistableIsNativeTypeCheckedSbyF(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _hoistableIsNativeTypeChecked()
SWIFT_EXTERN ptrdiff_t $sSa8capacitySivg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 {
  uint64_t _1;
  void * _Nullable _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(char * _Nonnull result, struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSa11descriptionSSvg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSa16debugDescriptionSSvg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_void_ptr_0_8 $sSa12arrayLiteralSayxGxd_tcfC(struct swift_interop_passStub_swift_void_ptr_0_8 elements, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // init(arrayLiteral:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_swift_uint64_t_0_8 {
  uint64_t _1;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_swift_uint64_t_0_8 swift_interop_passDirect_swift_uint64_t_0_8(const char * _Nonnull value) {
  struct swift_interop_passStub_swift_uint64_t_0_8 result;
  memcpy(&result._1, value + 0, 8);
  return result;
}

SWIFT_EXTERN ptrdiff_t $sSS5IndexV13encodedOffsetSivg(struct swift_interop_passStub_swift_uint64_t_0_8 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_uint64_t_0_8 {
  uint64_t _1;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_uint64_t_0_8(char * _Nonnull result, struct swift_interop_returnStub_swift_uint64_t_0_8 value) {
  memcpy(result + 0, &value._1, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS5IndexV13encodedOffsetABSi_tcfC(ptrdiff_t offset) SWIFT_NOEXCEPT SWIFT_CALL; // init(encodedOffset:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 {
  uint64_t _1;
  uint8_t _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(char * _Nonnull result, struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 1);
}

// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 {
  uint64_t _1;
  void * _Nullable _2;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(const char * _Nonnull value) {
  struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 result;
  memcpy(&result._1, value + 0, 8);
  memcpy(&result._2, value + 8, 8);
  return result;
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS5IndexV_6withinABSgAB_SStcfC(struct swift_interop_passStub_swift_uint64_t_0_8 sourcePosition, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 target) SWIFT_NOEXCEPT SWIFT_CALL; // init(_:within:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS5IndexV12samePosition2inABSgSS8UTF8ViewV_tF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 utf8, struct swift_interop_passStub_swift_uint64_t_0_8 _self) SWIFT_NOEXCEPT SWIFT_CALL; // samePosition(in:)
SWIFT_EXTERN ptrdiff_t $sSS5IndexV9hashValueSivg(struct swift_interop_passStub_swift_uint64_t_0_8 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS5IndexV12samePosition2inABSgSS_tF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 characters, struct swift_interop_passStub_swift_uint64_t_0_8 _self) SWIFT_NOEXCEPT SWIFT_CALL; // samePosition(in:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS5IndexV_6withinABSgAB_SS8UTF8ViewVtcfC(struct swift_interop_passStub_swift_uint64_t_0_8 idx, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 target) SWIFT_NOEXCEPT SWIFT_CALL; // init(_:within:)
struct Swift_String_Index {
  _Alignas(8) char _storage[8];
};

SWIFT_EXTERN void $sSqyxSgxcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, const void * _Nonnull some, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // init(_:)
SWIFT_EXTERN void $sSq17unsafelyUnwrappedxvg(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sS2SycfC(void) SWIFT_NOEXCEPT SWIFT_CALL; // init()
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS10startIndexSS0B0Vvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8endIndexSS0B0Vvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSS5countSivg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSS8distance4from2toSiSS5IndexV_AEtF(struct swift_interop_passStub_swift_uint64_t_0_8 start, struct swift_interop_passStub_swift_uint64_t_0_8 end, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // distance(from:to:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_uint64_t_0_8_uint64_t_8_16 {
  uint64_t _1;
  uint64_t _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_uint64_t_0_8_uint64_t_8_16(char * _Nonnull result, struct swift_interop_returnStub_swift_uint64_t_0_8_uint64_t_8_16 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 8);
}

SWIFT_EXTERN void $sSS15reserveCapacityyySiF(ptrdiff_t n, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // reserveCapacity(_:)
SWIFT_EXTERN void $sSS6appendyySSF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 other, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // append(_:)
SWIFT_EXTERN void $sSS6append10contentsOfySS_tF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 newElements, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // append(contentsOf:)
SWIFT_EXTERN void $sSS9removeAll15keepingCapacityySb_tF(bool keepCapacity, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // removeAll(keepingCapacity:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS4utf8SS8UTF8ViewVvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $sSS4utf8SS8UTF8ViewVvs(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 newValue, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS10lowercasedSSyF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // lowercased()
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS10uppercasedSSyF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // uppercased()
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS10charactersSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $sSS10charactersSSvs(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 newValue, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSS9hashValueSivg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $sSS7isEmptySbvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_void_ptr_0_8 $sSS13_nfcCodeUnitsSays5UInt8VGvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $sSS5writeyySSF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 other, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // write(_:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS16debugDescriptionSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS11descriptionSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $sSS9hasPrefixySbSSF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 prefix, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // hasPrefix(_:)
SWIFT_EXTERN bool $sSS9hasSuffixySbSSF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 suffix, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // hasSuffix(_:)
SWIFT_EXTERN void $sSS5_dumpyyF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _dump()
struct swift_interop_stub_Swift_String {
#if UINTPTR_MAX == 0xFFFFFFFFFFFFFFFFu
uint64_t _1;
void * _Nullable _2;
#elif UINTPTR_MAX == 0xFFFFFFFF
uint32_t _1;
uint32_t _2;
uint32_t _3;
#endif
};
static SWIFT_INLINE_THUNK struct swift_interop_stub_Swift_String swift_interop_passDirect_Swift_String(const char * _Nonnull value) {
struct swift_interop_stub_Swift_String result;
#if UINTPTR_MAX == 0xFFFFFFFFFFFFFFFFu
memcpy(&result._1, value, 8);
memcpy(&result._2, value + 8, 8);
#elif UINTPTR_MAX == 0xFFFFFFFF
memcpy(&result._1, value, 4);
memcpy(&result._2, value + 4, 4);
memcpy(&result._3, value + 8, 4);
#endif
return result;
}
SWIFT_EXTERN void *_Nonnull $sSS10FoundationE19_bridgeToObjectiveCSo8NSStringCyF(swift_interop_stub_Swift_String) SWIFT_NOEXCEPT SWIFT_CALL;
SWIFT_EXTERN swift_interop_stub_Swift_String $sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(void * _Nullable) SWIFT_NOEXCEPT SWIFT_CALL;
SWIFT_EXTERN swift_interop_stub_Swift_String $sSS7cStringSSSPys4Int8VG_tcfC(const char * _Nonnull) SWIFT_NOEXCEPT SWIFT_CALL;
struct Swift_String {
  _Alignas(8) char _storage[16];
};

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV10startIndexSS0D0Vvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV8endIndexSS0D0Vvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV5index5afterSS5IndexVAF_tF(struct swift_interop_passStub_swift_uint64_t_0_8 i, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // index(after:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV5index6beforeSS5IndexVAF_tF(struct swift_interop_passStub_swift_uint64_t_0_8 i, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // index(before:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV5index_8offsetBySS5IndexVAF_SitF(struct swift_interop_passStub_swift_uint64_t_0_8 i, ptrdiff_t n, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // index(_:offsetBy:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS8UTF8ViewV5index_8offsetBy07limitedE0SS5IndexVSgAG_SiAGtF(struct swift_interop_passStub_swift_uint64_t_0_8 i, ptrdiff_t n, struct swift_interop_passStub_swift_uint64_t_0_8 limit, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // index(_:offsetBy:limitedBy:)
SWIFT_EXTERN ptrdiff_t $sSS8UTF8ViewV8distance4from2toSiSS5IndexV_AGtF(struct swift_interop_passStub_swift_uint64_t_0_8 i, struct swift_interop_passStub_swift_uint64_t_0_8 j, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // distance(from:to:)
SWIFT_EXTERN uint8_t $sSS8UTF8ViewVys5UInt8VSS5IndexVcig(struct swift_interop_passStub_swift_uint64_t_0_8 i, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS8UTF8ViewV16debugDescriptionSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS8UTF8ViewV11descriptionSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSS8UTF8ViewV5countSivg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
struct Swift_UTF8View {
  _Alignas(8) char _storage[16];
};

}
}
}
namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {



























template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:Sq") Optional;
} // end namespace

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
static inline const constexpr bool isUsableInGenericContext<swift::Optional<T_0_0>> = isUsableInGenericContext<T_0_0>;
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
class SWIFT_SYMBOL("s:SS") String;
} // end namespace

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<swift::String> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:Sa") Array;
} // end namespace

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
static inline const constexpr bool isUsableInGenericContext<swift::Array<T_0_0>> = isUsableInGenericContext<T_0_0>;
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_Array;

static_assert(1 <= 3, "unsupported generic requirement list for metadata func");
// Type metadata accessor for Array
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSaMa(swift::_impl::MetadataRequestTy, void * _Nonnull) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:Sa") Array final {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK ~Array() noexcept {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Array(const Array &other) noexcept {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Array &operator =(const Array &other) noexcept {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Array &operator =(Array &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Array(Array &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
/// Creates a new, empty array.
/// This is equivalent to initializing with an empty array literal.
/// For example:
/// \code
/// var emptyArray = Array<Int>()
/// print(emptyArray.isEmpty)
/// // Prints "true"
///
/// emptyArray = []
/// print(emptyArray.isEmpty)
/// // Prints "true"
///
/// \endcode
  static SWIFT_INLINE_THUNK Array<T_0_0> init() SWIFT_SYMBOL("s:S2ayxGycfc");
/// Creates a new array containing the specified number of a single, repeated
/// value.
/// Here’s an example of creating an array initialized with five strings
/// containing the letter <em>Z</em>.
/// \code
/// let fiveZs = Array(repeating: "Z", count: 5)
/// print(fiveZs)
/// // Prints "["Z", "Z", "Z", "Z", "Z"]"
///
/// \endcode\param repeatedValue The element to repeat.
///
/// \param count The number of times to repeat the value passed in the
/// <code>repeating</code> parameter. <code>count</code> must be zero or greater.
///
  static SWIFT_INLINE_THUNK Array<T_0_0> init(const T_0_0& repeatedValue, swift::Int count) SWIFT_SYMBOL("s:Sa9repeating5countSayxGx_Sitcfc");
/// Reserves enough space to store the specified number of elements.
/// If you are adding a known number of elements to an array, use this method
/// to avoid multiple reallocations. This method ensures that the array has
/// unique, mutable, contiguous storage, with space allocated for at least
/// the requested number of elements.
/// Calling the <code>reserveCapacity(_:)</code> method on an array with bridged storage
/// triggers a copy to contiguous storage even if the existing storage
/// has room to store <code>minimumCapacity</code> elements.
/// For performance reasons, the size of the newly allocated storage might be
/// greater than the requested capacity. Use the array’s <code>capacity</code> property
/// to determine the size of the new storage.
/// <h1>Preserving an Array’s Geometric Growth Strategy</h1>
/// If you implement a custom data structure backed by an array that grows
/// dynamically, naively calling the <code>reserveCapacity(_:)</code> method can lead
/// to worse than expected performance. Arrays need to follow a geometric
/// allocation pattern for appending elements to achieve amortized
/// constant-time performance. The <code>Array</code> type’s <code>append(_:)</code> and
/// <code>append(contentsOf:)</code> methods take care of this detail for you, but
/// <code>reserveCapacity(_:)</code> allocates only as much space as you tell it to
/// (padded to a round value), and no more. This avoids over-allocation, but
/// can result in insertion not having amortized constant-time performance.
/// The following code declares <code>values</code>, an array of integers, and the
/// <code>addTenQuadratic()</code> function, which adds ten more values to the <code>values</code>
/// array on each call.
/// \code
///   var values: [Int] = [0, 1, 2, 3]
///
///   // Don't use 'reserveCapacity(_:)' like this
///   func addTenQuadratic() {
///       let newCount = values.count + 10
///       values.reserveCapacity(newCount)
///       for n in values.count..<newCount {
///           values.append(n)
///       }
///   }
///
/// \endcodeThe call to <code>reserveCapacity(_:)</code> increases the <code>values</code> array’s capacity
/// by exactly 10 elements on each pass through <code>addTenQuadratic()</code>, which
/// is linear growth. Instead of having constant time when averaged over
/// many calls, the function may decay to performance that is linear in
/// <code>values.count</code>. This is almost certainly not what you want.
/// In cases like this, the simplest fix is often to simply remove the call
/// to <code>reserveCapacity(_:)</code>, and let the <code>append(_:)</code> method grow the array
/// for you.
/// \code
///   func addTen() {
///       let newCount = values.count + 10
///       for n in values.count..<newCount {
///           values.append(n)
///       }
///   }
///
/// \endcodeIf you need more control over the capacity of your array, implement your
/// own geometric growth strategy, passing the size you compute to
/// <code>reserveCapacity(_:)</code>.
/// complexity:
/// O(<em>n</em>), where <em>n</em> is the number of elements in the array.
/// \param minimumCapacity The requested number of elements to store.
///
  SWIFT_INLINE_THUNK void reserveCapacity(swift::Int minimumCapacity) SWIFT_SYMBOL("s:Sa15reserveCapacityyySiF");
/// Adds a new element at the end of the array.
/// Use this method to append a single element to the end of a mutable array.
/// \code
/// var numbers = [1, 2, 3, 4, 5]
/// numbers.append(100)
/// print(numbers)
/// // Prints "[1, 2, 3, 4, 5, 100]"
///
/// \endcodeBecause arrays increase their allocated capacity using an exponential
/// strategy, appending a single element to an array is an O(1) operation
/// when averaged over many calls to the <code>append(_:)</code> method. When an array
/// has additional capacity and is not sharing its storage with another
/// instance, appending an element is O(1). When an array needs to
/// reallocate storage before appending or its storage is shared with
/// another copy, appending is O(<em>n</em>), where <em>n</em> is the length of the array.
/// complexity:
/// O(1) on average, over many calls to <code>append(_:)</code> on the
/// same array.
/// \param newElement The element to append to the array.
///
  SWIFT_INLINE_THUNK void append(const T_0_0& newElement) SWIFT_SYMBOL("s:Sa6appendyyxnF");
  SWIFT_INLINE_THUNK swift::Optional<T_0_0> _customRemoveLast() SWIFT_SYMBOL("s:Sa17_customRemoveLastxSgyF");
/// Removes and returns the element at the specified position.
/// All the elements following the specified position are moved up to
/// close the gap.
/// \code
/// var measurements: [Double] = [1.1, 1.5, 2.9, 1.2, 1.5, 1.3, 1.2]
/// let removed = measurements.remove(at: 2)
/// print(measurements)
/// // Prints "[1.1, 1.5, 1.2, 1.5, 1.3, 1.2]"
///
/// \endcodecomplexity:
/// O(<em>n</em>), where <em>n</em> is the length of the array.
/// \param index The position of the element to remove. <code>index</code> must
/// be a valid index of the array.
///
///
/// returns:
/// The element at the specified index.
  SWIFT_INLINE_THUNK T_0_0 removeAt(swift::Int index) SWIFT_SYMBOL("s:Sa6remove2atxSi_tF");
/// Inserts a new element at the specified position.
/// The new element is inserted before the element currently at the specified
/// index. If you pass the array’s <code>endIndex</code> property as the <code>index</code>
/// parameter, the new element is appended to the array.
/// \code
/// var numbers = [1, 2, 3, 4, 5]
/// numbers.insert(100, at: 3)
/// numbers.insert(200, at: numbers.endIndex)
///
/// print(numbers)
/// // Prints "[1, 2, 3, 100, 4, 5, 200]"
///
/// \endcodecomplexity:
/// O(<em>n</em>), where <em>n</em> is the length of the array. If
/// <code>i == endIndex</code>, this method is equivalent to <code>append(_:)</code>.
/// \param newElement The new element to insert into the array.
///
/// \param i The position at which to insert the new element.
/// <code>index</code> must be a valid index of the array or equal to its <code>endIndex</code>
/// property.
///
  SWIFT_INLINE_THUNK void insertAt(const T_0_0& newElement, swift::Int i) SWIFT_SYMBOL("s:Sa6insert_2atyxn_SitF");
/// Removes all elements from the array.
/// complexity:
/// O(<em>n</em>), where <em>n</em> is the length of the array.
/// \param keepCapacity Pass <code>true</code> to keep the existing capacity of
/// the array after removing its elements. The default value is
/// <code>false</code>.
///
  SWIFT_INLINE_THUNK void removeAllKeepingCapacity(bool keepCapacity) SWIFT_SYMBOL("s:Sa9removeAll15keepingCapacityySb_tF");
  SWIFT_INLINE_THUNK swift::Int getStartIndex() const SWIFT_SYMBOL("s:Sa10startIndexSivp");
  SWIFT_INLINE_THUNK swift::Int getEndIndex() const SWIFT_SYMBOL("s:Sa8endIndexSivp");
/// Returns the distance between two indices.
/// \param start A valid index of the collection.
///
/// \param end Another valid index of the collection. If <code>end</code> is equal to
/// <code>start</code>, the result is zero.
///
///
/// returns:
/// The distance between <code>start</code> and <code>end</code>.
  SWIFT_INLINE_THUNK swift::Int distanceFromTo(swift::Int start, swift::Int end) const SWIFT_SYMBOL("s:Sa8distance4from2toS2i_SitF");
SWIFT_INLINE_THUNK T_0_0 operator [](swift::Int index) const SWIFT_SYMBOL("s:SayxSicig");
  SWIFT_INLINE_THUNK swift::Int getCount() const SWIFT_SYMBOL("s:Sa5countSivp");
/// Returns <code>true</code> if the array is native and does not need a deferred
/// type check.  May be hoisted by the optimizer, which means its
/// results may be stale by the time they are used if there is an
/// inout violation in user code.
  SWIFT_INLINE_THUNK bool _hoistableIsNativeTypeChecked() const SWIFT_SYMBOL("s:Sa29_hoistableIsNativeTypeCheckedSbyF");
  SWIFT_INLINE_THUNK swift::Int getCapacity() const SWIFT_SYMBOL("s:Sa8capacitySivp");
  SWIFT_INLINE_THUNK String getDescription() const SWIFT_SYMBOL("s:Sa11descriptionSSvp");
  SWIFT_INLINE_THUNK String getDebugDescription() const SWIFT_SYMBOL("s:Sa16debugDescriptionSSvp");
/// Creates an array from the given array literal.
/// Do not call this initializer directly. It is used by the compiler
/// when you use an array literal. Instead, create a new array by using an
/// array literal as its value. To do this, enclose a comma-separated list of
/// values in square brackets.
/// Here, an array of strings is created from an array literal holding
/// only strings.
/// \code
/// let ingredients = ["cocoa beans", "sugar", "cocoa butter", "salt"]
///
/// \endcode\param elements A variadic list of elements of the new array.
///
  static SWIFT_INLINE_THUNK Array<T_0_0> init(const Array<T_0_0>& elements) SWIFT_SYMBOL("s:Sa12arrayLiteralSayxGxd_tcfc");
private:
  SWIFT_INLINE_THUNK Array(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Array _make() noexcept {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Array(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Array<T_0_0>;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sSayxGD;
  static inline constexpr $sSayxGD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_Array {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Array<T_0_0> &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Array<T_0_0> &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Array<T_0_0> returnNewValue(T callable) {
    auto result = Array<T_0_0>::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
struct TypeMetadataTrait<swift::Array<T_0_0>> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata())._0;
  }
};
namespace _impl{
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
static inline const constexpr bool isOpaqueLayout<swift::Array<T_0_0>> = true;
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {











































































































































































































































































































class SWIFT_SYMBOL("s:SS8UTF8ViewV") UTF8View;
} // end namespace

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<swift::UTF8View> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
class SWIFT_SYMBOL("s:SS5IndexV") String_Index;
} // end namespace

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<swift::String_Index> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
namespace _impl {

class _impl_String_Index;

// Type metadata accessor for Index
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSS5IndexVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:SS5IndexV") String_Index final {
public:
  SWIFT_INLINE_THUNK ~String_Index() noexcept {
    auto metadata = _impl::$sSS5IndexVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK String_Index(const String_Index &other) noexcept {
    auto metadata = _impl::$sSS5IndexVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK String_Index &operator =(const String_Index &other) noexcept {
    auto metadata = _impl::$sSS5IndexVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK String_Index &operator =(String_Index &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER String_Index(String_Index &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Int getEncodedOffset() const SWIFT_SYMBOL("s:SS5IndexV13encodedOffsetSivp");
/// Creates a new index at the specified code unit offset.
/// \param offset An offset in code units.
///
  static SWIFT_INLINE_THUNK String_Index init(swift::Int offset) SWIFT_SYMBOL("s:SS5IndexV13encodedOffsetABSi_tcfc");
/// Creates an index in the given string that corresponds exactly to the
/// specified position.
/// If the index passed as <code>sourcePosition</code> represents the start of an
/// extended grapheme cluster—the element type of a string—then the
/// initializer succeeds.
/// The following example converts the position of the Unicode scalar <code>"e"</code>
/// into its corresponding position in the string. The character at that
/// position is the composed <code>"é"</code> character.
/// \code
/// let cafe = "Cafe\u{0301}"
/// print(cafe)
/// // Prints "Café"
///
/// let scalarsIndex = cafe.unicodeScalars.firstIndex(of: "e")!
/// let stringIndex = String.Index(scalarsIndex, within: cafe)!
///
/// print(cafe[...stringIndex])
/// // Prints "Café"
///
/// \endcodeIf the index passed as <code>sourcePosition</code> doesn’t have an exact
/// corresponding position in <code>target</code>, the result of the initializer is
/// <code>nil</code>. For example, an attempt to convert the position of the combining
/// acute accent (<code>"\u{0301}"</code>) fails. Combining Unicode scalars do not have
/// their own position in a string.
/// \code
/// let nextScalarsIndex = cafe.unicodeScalars.index(after: scalarsIndex)
/// let nextStringIndex = String.Index(nextScalarsIndex, within: cafe)
///
/// print(nextStringIndex)
/// // Prints "nil"
///
/// \endcode\param sourcePosition A position in a view of the <code>target</code> parameter.
/// <code>sourcePosition</code> must be a valid index of at least one of the views
/// of <code>target</code>.
///
/// \param target The string referenced by the resulting index.
///
  static SWIFT_INLINE_THUNK swift::Optional<String_Index> init(const String_Index& sourcePosition, const String& target) SWIFT_SYMBOL("s:SS5IndexV_6withinABSgAB_SStcfc");
/// Returns the position in the given UTF-8 view that corresponds exactly to
/// this index.
/// This example first finds the position of the character <code>"é"</code>, and then
/// uses this method find the same position in the string’s <code>utf8</code> view.
/// \code
/// let cafe = "Café"
/// if let i = cafe.firstIndex(of: "é") {
///     let j = i.samePosition(in: cafe.utf8)!
///     print(Array(cafe.utf8[j...]))
/// }
/// // Prints "[195, 169]"
///
/// \endcode\param utf8 The view to use for the index conversion. This index
/// must be a valid index of at least one view of the string shared by
/// <code>utf8</code>.
///
///
/// returns:
/// The position in <code>utf8</code> that corresponds exactly to this index.
/// If this index does not have an exact corresponding position in <code>utf8</code>,
/// this method returns <code>nil</code>. For example, an attempt to convert the
/// position of a UTF-16 trailing surrogate returns <code>nil</code>.
  SWIFT_INLINE_THUNK swift::Optional<String_Index> samePositionIn(const UTF8View& utf8) const SWIFT_SYMBOL("s:SS5IndexV12samePosition2inABSgSS8UTF8ViewV_tF");
  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:SS5IndexV9hashValueSivp");
/// Returns the position in the given string that corresponds exactly to this
/// index.
/// This example first finds the position of a space (UTF-8 code point <code>32</code>)
/// in a string’s <code>utf8</code> view and then uses this method find the same position
/// in the string.
/// \code
/// let cafe = "Café 🍵"
/// let i = cafe.unicodeScalars.firstIndex(of: "🍵")!
/// let j = i.samePosition(in: cafe)!
/// print(cafe[j...])
/// // Prints "🍵"
///
/// \endcode\param characters The string to use for the index conversion.
/// This index must be a valid index of at least one view of <code>characters</code>.
///
///
/// returns:
/// The position in <code>characters</code> that corresponds exactly to
/// this index. If this index does not have an exact corresponding
/// position in <code>characters</code>, this method returns <code>nil</code>. For example,
/// an attempt to convert the position of a UTF-8 continuation byte
/// returns <code>nil</code>.
  SWIFT_INLINE_THUNK swift::Optional<String_Index> samePositionIn(const String& characters) const SWIFT_SYMBOL("s:SS5IndexV12samePosition2inABSgSS_tF");
/// Creates an index in the given UTF-8 view that corresponds exactly to the
/// specified <code>UTF16View</code> position.
/// The following example finds the position of a space in a string’s <code>utf16</code>
/// view and then converts that position to an index in the string’s
/// <code>utf8</code> view.
/// \code
/// let cafe = "Café 🍵"
///
/// let utf16Index = cafe.utf16.firstIndex(of: 32)!
/// let utf8Index = String.UTF8View.Index(utf16Index, within: cafe.utf8)!
///
/// print(Array(cafe.utf8[..<utf8Index]))
/// // Prints "[67, 97, 102, 195, 169]"
///
/// \endcodeIf the position passed in <code>utf16Index</code> doesn’t have an exact
/// corresponding position in <code>utf8</code>, the result of the initializer is
/// <code>nil</code>. For example, because UTF-8 and UTF-16 represent high Unicode code
/// points differently, an attempt to convert the position of the trailing
/// surrogate of a UTF-16 surrogate pair fails.
/// The next example attempts to convert the indices of the two UTF-16 code
/// points that represent the teacup emoji (<code>"🍵"</code>). The index of the lead
/// surrogate is successfully converted to a position in <code>utf8</code>, but the
/// index of the trailing surrogate is not.
/// \code
/// let emojiHigh = cafe.utf16.index(after: utf16Index)
/// print(String.UTF8View.Index(emojiHigh, within: cafe.utf8))
/// // Prints "Optional(String.Index(...))"
///
/// let emojiLow = cafe.utf16.index(after: emojiHigh)
/// print(String.UTF8View.Index(emojiLow, within: cafe.utf8))
/// // Prints "nil"
///
/// \endcode\param sourcePosition A position in a <code>String</code> or one of its views.
///
/// \param target The <code>UTF8View</code> in which to find the new position.
///
  static SWIFT_INLINE_THUNK swift::Optional<String_Index> init(const String_Index& idx, const UTF8View& target) SWIFT_SYMBOL("s:SS5IndexV_6withinABSgAB_SS8UTF8ViewVtcfc");
private:
  SWIFT_INLINE_THUNK String_Index() noexcept {}
  static SWIFT_INLINE_THUNK String_Index _make() noexcept { return String_Index(); }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage; }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage; }

  alignas(8) char _storage[8];
  friend class _impl::_impl_String_Index;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sSS5IndexVD;
  static inline constexpr $sSS5IndexVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_String_Index {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(String_Index &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const String_Index &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER String_Index returnNewValue(T callable) {
    auto result = String_Index::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSS5IndexVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<swift::String_Index> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSS5IndexVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<swift::String_Index> = true;
template<>
struct implClassFor<swift::String_Index> { using type = swift::_impl::_impl_String_Index; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {


















































































































































































































































/// A type that represents either a wrapped value or the absence of a value.
/// You use the <code>Optional</code> type whenever you use optional values, even if you
/// never type the word <code>Optional</code>. Swift’s type system usually shows the
/// wrapped type’s name with a trailing question mark (<code>?</code>) instead of showing
/// the full type name. For example, if a variable has the type <code>Int?</code>, that’s
/// just another way of writing <code>Optional<Int></code>. The shortened form is
/// preferred for ease of reading and writing code.
/// The types of <code>shortForm</code> and <code>longForm</code> in the following code sample are
/// the same:
/// \code
/// let shortForm: Int? = Int("42")
/// let longForm: Optional<Int> = Int("42")
///
/// \endcodeThe <code>Optional</code> type is an enumeration with two cases. <code>Optional.none</code> is
/// equivalent to the <code>nil</code> literal. <code>Optional.some(Wrapped)</code> stores a wrapped
/// value. For example:
/// \code
/// let number: Int? = Optional.some(42)
/// let noNumber: Int? = Optional.none
/// print(noNumber == nil)
/// // Prints "true"
///
/// \endcodeYou must unwrap the value of an <code>Optional</code> instance before you can use it
/// in many contexts. Because Swift provides several ways to safely unwrap
/// optional values, you can choose the one that helps you write clear,
/// concise code.
/// The following examples use this dictionary of image names and file paths:
/// \code
/// let imagePaths = ["star": "/glyphs/star.png",
///                   "portrait": "/images/content/portrait.jpg",
///                   "spacer": "/images/shared/spacer.gif"]
///
/// \endcodeGetting a dictionary’s value using a key returns an optional value, so
/// <code>imagePaths["star"]</code> has type <code>Optional<String></code> or, written in the
/// preferred manner, <code>String?</code>.
/// <h2>Optional Binding</h2>
/// To conditionally bind the wrapped value of an <code>Optional</code> instance to a new
/// variable, use one of the optional binding control structures, including
/// <code>if let</code>, <code>guard let</code>, and <code>switch</code>.
/// \code
/// if let starPath = imagePaths["star"] {
///     print("The star image is at '\(starPath)'")
/// } else {
///     print("Couldn't find the star image")
/// }
/// // Prints "The star image is at '/glyphs/star.png'"
///
/// \endcode<h2>Optional Chaining</h2>
/// To safely access the properties and methods of a wrapped instance, use the
/// postfix optional chaining operator (postfix <code>?</code>). The following example uses
/// optional chaining to access the <code>hasSuffix(_:)</code> method on a <code>String?</code>
/// instance.
/// \code
/// if imagePaths["star"]?.hasSuffix(".png") == true {
///     print("The star image is in PNG format")
/// }
/// // Prints "The star image is in PNG format"
///
/// \endcode<h2>Using the Nil-Coalescing Operator</h2>
/// Use the nil-coalescing operator (<code>??</code>) to supply a default value in case
/// the <code>Optional</code> instance is <code>nil</code>. Here a default path is supplied for an
/// image that is missing from <code>imagePaths</code>.
/// \code
/// let defaultImagePath = "/images/default.png"
/// let heartPath = imagePaths["heart"] ?? defaultImagePath
/// print(heartPath)
/// // Prints "/images/default.png"
///
/// \endcodeThe <code>??</code> operator also works with another <code>Optional</code> instance on the
/// right-hand side. As a result, you can chain multiple <code>??</code> operators
/// together.
/// \code
/// let shapePath = imagePaths["cir"] ?? imagePaths["squ"] ?? defaultImagePath
/// print(shapePath)
/// // Prints "/images/default.png"
///
/// \endcode<h2>Unconditional Unwrapping</h2>
/// When you’re certain that an instance of <code>Optional</code> contains a value, you
/// can unconditionally unwrap the value by using the forced
/// unwrap operator (postfix <code>!</code>). For example, the result of the failable <code>Int</code>
/// initializer is unconditionally unwrapped in the example below.
/// \code
/// let number = Int("42")!
/// print(number)
/// // Prints "42"
///
/// \endcodeYou can also perform unconditional optional chaining by using the postfix
/// <code>!</code> operator.
/// \code
/// let isPNG = imagePaths["star"]!.hasSuffix(".png")
/// print(isPNG)
/// // Prints "true"
///
/// \endcodeUnconditionally unwrapping a <code>nil</code> instance with <code>!</code> triggers a runtime
/// error.
namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_Optional;

static_assert(1 <= 3, "unsupported generic requirement list for metadata func");
// Type metadata accessor for Optional
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSqMa(swift::_impl::MetadataRequestTy, void * _Nonnull) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum Optional
extern "C" {
extern unsigned $sSq4noneyxSgABmlFWC;
extern unsigned $sSq4someyxSgxcABmlFWC;
}

} // namespace _impl

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:Sq") Optional final {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK ~Optional() noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Optional(const Optional &other) noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Optional &operator =(const Optional &other) noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Optional &operator =(Optional &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Optional(Optional &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    some SWIFT_SYMBOL("s:Sq4someyxSgxcABmlF"),
    none SWIFT_SYMBOL("s:Sq4noneyxSgABmlF")
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_some {  // impl struct for case some
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::some;
    }
    SWIFT_INLINE_THUNK Optional<T_0_0> operator()(const T_0_0& val) const;
  } some SWIFT_SYMBOL("s:Sq4someyxSgxcABmlF");
  SWIFT_INLINE_THUNK bool isSome() const;
  SWIFT_INLINE_THUNK T_0_0 getSome() const;

  inline const static struct _impl_none {  // impl struct for case none
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::none;
    }
    SWIFT_INLINE_THUNK Optional<T_0_0> operator()() const;
  } none SWIFT_SYMBOL("s:Sq4noneyxSgABmlF");
  SWIFT_INLINE_THUNK bool isNone() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    switch (_getEnumTag()) {
      case 0: return cases::some;
      case 1: return cases::none;
      default: abort();
    }
  }

/// Creates an instance that stores the given value.
  static SWIFT_INLINE_THUNK swift::Optional<T_0_0> init(const T_0_0& some_) SWIFT_SYMBOL("s:SqyxSgxcfc");
  SWIFT_INLINE_THUNK T_0_0 getUnsafelyUnwrapped() const SWIFT_SYMBOL("s:Sq17unsafelyUnwrappedxvp");
#define SWIFT_CXX_INTEROP_OPTIONAL_MIXIN
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
// Allow user to find the header using additional include paths
#if __has_include(<swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <swiftToCxx/_SwiftStdlibCxxOverlay.h>
// Look for the C++ interop support header relative to clang's resource dir:
//  '<toolchain>/usr/lib/clang/<version>/include/../../../swift/swiftToCxx'.
#elif __has_include(<../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#elif __has_include(<../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
//  '<toolchain>/usr/local/lib/clang/<version>/include/../../../../../lib/swift/swiftToCxx'.
#include <../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#endif
#pragma clang diagnostic pop
private:
  SWIFT_INLINE_THUNK Optional(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Optional _make() noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Optional(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Optional<T_0_0>;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sxSgD;
  static inline constexpr $sxSgD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_Optional {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Optional<T_0_0> &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Optional<T_0_0> &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Optional<T_0_0> returnNewValue(T callable) {
    auto result = Optional<T_0_0>::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
struct TypeMetadataTrait<swift::Optional<T_0_0>> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata())._0;
  }
};
namespace _impl{
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
static inline const constexpr bool isOpaqueLayout<swift::Optional<T_0_0>> = true;
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {


























































































































































































































































































































































































































namespace _impl {

class _impl_String;

// Type metadata accessor for String
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSSMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:SS") String final {
public:
  SWIFT_INLINE_THUNK ~String() noexcept {
    auto metadata = _impl::$sSSMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK String(const String &other) noexcept {
    auto metadata = _impl::$sSSMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK String &operator =(const String &other) noexcept {
    auto metadata = _impl::$sSSMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK String &operator =(String &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER String(String &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
/// Creates an empty string.
/// Using this initializer is equivalent to initializing a string with an
/// empty string literal.
/// \code
/// let empty = ""
/// let alsoEmpty = String()
///
/// \endcode
  static SWIFT_INLINE_THUNK String init() SWIFT_SYMBOL("s:S2Sycfc");
  SWIFT_INLINE_THUNK String_Index getStartIndex() const SWIFT_SYMBOL("s:SS10startIndexSS0B0Vvp");
  SWIFT_INLINE_THUNK String_Index getEndIndex() const SWIFT_SYMBOL("s:SS8endIndexSS0B0Vvp");
  SWIFT_INLINE_THUNK swift::Int getCount() const SWIFT_SYMBOL("s:SS5countSivp");
/// Returns the distance between two indices.
/// complexity:
/// O(<em>n</em>), where <em>n</em> is the resulting distance.
/// \param start A valid index of the collection.
///
/// \param end Another valid index of the collection. If <code>end</code> is equal to
/// <code>start</code>, the result is zero.
///
///
/// returns:
/// The distance between <code>start</code> and <code>end</code>.
  SWIFT_INLINE_THUNK swift::Int distanceFromTo(const String_Index& start, const String_Index& end) const SWIFT_SYMBOL("s:SS8distance4from2toSiSS5IndexV_AEtF");
/// Reserves enough space in the string’s underlying storage to store the
/// specified number of ASCII characters.
/// Because each character in a string can require more than a single ASCII
/// character’s worth of storage, additional allocation may be necessary
/// when adding characters to a string after a call to
/// <code>reserveCapacity(_:)</code>.
/// complexity:
/// O(<em>n</em>)
/// \param n The minimum number of ASCII character’s worth of storage
/// to allocate.
///
  SWIFT_INLINE_THUNK void reserveCapacity(swift::Int n) SWIFT_SYMBOL("s:SS15reserveCapacityyySiF");
/// Appends the given string to this string.
/// The following example builds a customized greeting by using the
/// <code>append(_:)</code> method:
/// \code
/// var greeting = "Hello, "
/// if let name = getUserName() {
///     greeting.append(name)
/// } else {
///     greeting.append("friend")
/// }
/// print(greeting)
/// // Prints "Hello, friend"
///
/// \endcode\param other Another string.
///
  SWIFT_INLINE_THUNK void append(const String& other) SWIFT_SYMBOL("s:SS6appendyySSF");
  SWIFT_INLINE_THUNK void appendContentsOf(const String& newElements) SWIFT_SYMBOL("s:SS6append10contentsOfySS_tF");
/// Replaces this string with the empty string.
/// Calling this method invalidates any existing indices for use with this
/// string.
/// \param keepCapacity Pass <code>true</code> to prevent the release of the
/// string’s allocated storage. Retaining the storage can be a useful
/// optimization when you’re planning to grow the string again. The
/// default value is <code>false</code>.
///
  SWIFT_INLINE_THUNK void removeAllKeepingCapacity(bool keepCapacity) SWIFT_SYMBOL("s:SS9removeAll15keepingCapacityySb_tF");
  SWIFT_INLINE_THUNK UTF8View getUtf8() const SWIFT_SYMBOL("s:SS4utf8SS8UTF8ViewVvp");
  SWIFT_INLINE_THUNK void setUtf8(const UTF8View& newValue) SWIFT_SYMBOL("s:SS4utf8SS8UTF8ViewVvp");
/// Returns a lowercase version of the string.
/// Here’s an example of transforming a string to all lowercase letters.
/// \code
/// let cafe = "BBQ Café 🍵"
/// print(cafe.lowercased())
/// // Prints "bbq café 🍵"
///
/// \endcodecomplexity:
/// O(<em>n</em>)
///
/// returns:
/// A lowercase copy of the string.
  SWIFT_INLINE_THUNK String lowercased() const SWIFT_SYMBOL("s:SS10lowercasedSSyF");
/// Returns an uppercase version of the string.
/// The following example transforms a string to uppercase letters:
/// \code
/// let cafe = "Café 🍵"
/// print(cafe.uppercased())
/// // Prints "CAFÉ 🍵"
///
/// \endcodecomplexity:
/// O(<em>n</em>)
///
/// returns:
/// An uppercase copy of the string.
  SWIFT_INLINE_THUNK String uppercased() const SWIFT_SYMBOL("s:SS10uppercasedSSyF");
  SWIFT_INLINE_THUNK String getCharacters() const SWIFT_SYMBOL("s:SS10charactersSSvp");
  SWIFT_INLINE_THUNK void setCharacters(const String& newValue) SWIFT_SYMBOL("s:SS10charactersSSvp");
  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:SS9hashValueSivp");
  SWIFT_INLINE_THUNK bool isEmpty() const SWIFT_SYMBOL("s:SS7isEmptySbvp");
  SWIFT_INLINE_THUNK Array<uint8_t> get_nfcCodeUnits() const SWIFT_SYMBOL("s:SS13_nfcCodeUnitsSays5UInt8VGvp");
/// Appends the given string to this string.
/// \param other A string to append.
///
  SWIFT_INLINE_THUNK void write(const String& other) SWIFT_SYMBOL("s:SS5writeyySSF");
  SWIFT_INLINE_THUNK String getDebugDescription() const SWIFT_SYMBOL("s:SS16debugDescriptionSSvp");
  SWIFT_INLINE_THUNK String getDescription() const SWIFT_SYMBOL("s:SS11descriptionSSvp");
  SWIFT_INLINE_THUNK bool hasPrefix(const String& prefix) const SWIFT_SYMBOL("s:SS9hasPrefixySbSSF");
  SWIFT_INLINE_THUNK bool hasSuffix(const String& suffix) const SWIFT_SYMBOL("s:SS9hasSuffixySbSSF");
  SWIFT_INLINE_THUNK void _dump() const SWIFT_SYMBOL("s:SS5_dumpyyF");
#if defined(__OBJC__)
  SWIFT_INLINE_THUNK operator NSString * _Nonnull () const noexcept {
    return (__bridge_transfer NSString *)(_impl::$sSS10FoundationE19_bridgeToObjectiveCSo8NSStringCyF(_impl::swift_interop_passDirect_Swift_String(_getOpaquePointer())));
  }
static SWIFT_INLINE_THUNK String init(NSString * _Nonnull nsString) noexcept {
    auto result = _make();
    auto res = _impl::$sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ((__bridge void *)nsString);
    memcpy(result._getOpaquePointer(), &res, sizeof(res));
    return result;
  }

#endif
#define SWIFT_CXX_INTEROP_STRING_MIXIN
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
// Allow user to find the header using additional include paths
#if __has_include(<swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <swiftToCxx/_SwiftStdlibCxxOverlay.h>
// Look for the C++ interop support header relative to clang's resource dir:
//  '<toolchain>/usr/lib/clang/<version>/include/../../../swift/swiftToCxx'.
#elif __has_include(<../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#elif __has_include(<../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
//  '<toolchain>/usr/local/lib/clang/<version>/include/../../../../../lib/swift/swiftToCxx'.
#include <../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#endif
#pragma clang diagnostic pop
private:
  SWIFT_INLINE_THUNK String() noexcept {}
  static SWIFT_INLINE_THUNK String _make() noexcept { return String(); }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage; }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage; }

  alignas(8) char _storage[16];
  friend class _impl::_impl_String;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sSSD;
  static inline constexpr $sSSD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_String {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(String &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const String &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER String returnNewValue(T callable) {
    auto result = String::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSSMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<swift::String> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSSMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<swift::String> = true;
template<>
struct implClassFor<swift::String> { using type = swift::_impl::_impl_String; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {




























































































































































































namespace _impl {

class _impl_UTF8View;

// Type metadata accessor for UTF8View
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSS8UTF8ViewVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:SS8UTF8ViewV") UTF8View final {
public:
  SWIFT_INLINE_THUNK ~UTF8View() noexcept {
    auto metadata = _impl::$sSS8UTF8ViewVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK UTF8View(const UTF8View &other) noexcept {
    auto metadata = _impl::$sSS8UTF8ViewVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK UTF8View &operator =(const UTF8View &other) noexcept {
    auto metadata = _impl::$sSS8UTF8ViewVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK UTF8View &operator =(UTF8View &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER UTF8View(UTF8View &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK String_Index getStartIndex() const SWIFT_SYMBOL("s:SS8UTF8ViewV10startIndexSS0D0Vvp");
  SWIFT_INLINE_THUNK String_Index getEndIndex() const SWIFT_SYMBOL("s:SS8UTF8ViewV8endIndexSS0D0Vvp");
/// Returns the next consecutive position after <code>i</code>.
/// precondition:
/// The next position is representable.
  SWIFT_INLINE_THUNK String_Index indexAfter(const String_Index& i) const SWIFT_SYMBOL("s:SS8UTF8ViewV5index5afterSS5IndexVAF_tF");
  SWIFT_INLINE_THUNK String_Index indexBefore(const String_Index& i) const SWIFT_SYMBOL("s:SS8UTF8ViewV5index6beforeSS5IndexVAF_tF");
  SWIFT_INLINE_THUNK String_Index indexOffsetBy(const String_Index& i, swift::Int n) const SWIFT_SYMBOL("s:SS8UTF8ViewV5index_8offsetBySS5IndexVAF_SitF");
  SWIFT_INLINE_THUNK swift::Optional<String_Index> indexOffsetByLimitedBy(const String_Index& i, swift::Int n, const String_Index& limit) const SWIFT_SYMBOL("s:SS8UTF8ViewV5index_8offsetBy07limitedE0SS5IndexVSgAG_SiAGtF");
  SWIFT_INLINE_THUNK swift::Int distanceFromTo(const String_Index& i, const String_Index& j) const SWIFT_SYMBOL("s:SS8UTF8ViewV8distance4from2toSiSS5IndexV_AGtF");
SWIFT_INLINE_THUNK uint8_t operator [](const String_Index& i) const SWIFT_SYMBOL("s:SS8UTF8ViewVys5UInt8VSS5IndexVcig");
  SWIFT_INLINE_THUNK String getDebugDescription() const SWIFT_SYMBOL("s:SS8UTF8ViewV16debugDescriptionSSvp");
  SWIFT_INLINE_THUNK String getDescription() const SWIFT_SYMBOL("s:SS8UTF8ViewV11descriptionSSvp");
  SWIFT_INLINE_THUNK swift::Int getCount() const SWIFT_SYMBOL("s:SS8UTF8ViewV5countSivp");
private:
  SWIFT_INLINE_THUNK UTF8View() noexcept {}
  static SWIFT_INLINE_THUNK UTF8View _make() noexcept { return UTF8View(); }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage; }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage; }

  alignas(8) char _storage[16];
  friend class _impl::_impl_UTF8View;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sSS8UTF8ViewVD;
  static inline constexpr $sSS8UTF8ViewVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_UTF8View {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(UTF8View &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const UTF8View &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER UTF8View returnNewValue(T callable) {
    auto result = UTF8View::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSS8UTF8ViewVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<swift::UTF8View> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSS8UTF8ViewVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<swift::UTF8View> = true;
template<>
struct implClassFor<swift::UTF8View> { using type = swift::_impl::_impl_UTF8View; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {



















































































































































































































































































































































  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK Array<T_0_0> Array<T_0_0>::init() {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_Array<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_void_ptr_0_8(result, _impl::$sS2ayxGycfC(swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK Array<T_0_0> Array<T_0_0>::init(const T_0_0& repeatedValue, swift::Int count) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  alignas(alignof(T_0_0)) char copyBuffer_consumedParamCopy_repeatedValue[sizeof(T_0_0)];
  auto &consumedParamCopy_repeatedValue = *(new(copyBuffer_consumedParamCopy_repeatedValue) T_0_0(repeatedValue));
  swift::_impl::ConsumedValueStorageDestroyer<T_0_0> storageGuard_consumedParamCopy_repeatedValue(consumedParamCopy_repeatedValue);
  return _impl::_impl_Array<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_void_ptr_0_8(result, _impl::$sSa9repeating5countSayxGx_SitcfC(swift::_impl::getOpaquePointer(consumedParamCopy_repeatedValue), count, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void Array<T_0_0>::reserveCapacity(swift::Int minimumCapacity) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa15reserveCapacityyySiF(minimumCapacity, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void Array<T_0_0>::append(const T_0_0& newElement) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  alignas(alignof(T_0_0)) char copyBuffer_consumedParamCopy_newElement[sizeof(T_0_0)];
  auto &consumedParamCopy_newElement = *(new(copyBuffer_consumedParamCopy_newElement) T_0_0(newElement));
  swift::_impl::ConsumedValueStorageDestroyer<T_0_0> storageGuard_consumedParamCopy_newElement(consumedParamCopy_newElement);
  return _impl::$sSa6appendyyxnF(swift::_impl::getOpaquePointer(consumedParamCopy_newElement), swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<T_0_0> Array<T_0_0>::_customRemoveLast() {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_Optional<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$sSa17_customRemoveLastxSgyF(result, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK T_0_0 Array<T_0_0>::removeAt(swift::Int index) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  _impl::$sSa6remove2atxSi_tF(reinterpret_cast<void *>(&returnValue), index, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
_impl::$sSa6remove2atxSi_tF(returnValue, index, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
alignas(alignof(T_0_0)) char storage[sizeof(T_0_0)];
auto * _Nonnull storageObjectPtr = reinterpret_cast<T_0_0 *>(storage);
_impl::$sSa6remove2atxSi_tF(storage, index, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
T_0_0 result(static_cast<T_0_0 &&>(*storageObjectPtr));
storageObjectPtr->~T_0_0();
return result;
  } else {
  T_0_0 returnValue;
_impl::$sSa6remove2atxSi_tF(reinterpret_cast<void *>(&returnValue), index, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return returnValue;
  }
#pragma clang diagnostic pop
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void Array<T_0_0>::insertAt(const T_0_0& newElement, swift::Int i) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  alignas(alignof(T_0_0)) char copyBuffer_consumedParamCopy_newElement[sizeof(T_0_0)];
  auto &consumedParamCopy_newElement = *(new(copyBuffer_consumedParamCopy_newElement) T_0_0(newElement));
  swift::_impl::ConsumedValueStorageDestroyer<T_0_0> storageGuard_consumedParamCopy_newElement(consumedParamCopy_newElement);
  return _impl::$sSa6insert_2atyxn_SitF(swift::_impl::getOpaquePointer(consumedParamCopy_newElement), i, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void Array<T_0_0>::removeAllKeepingCapacity(bool keepCapacity) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa9removeAll15keepingCapacityySb_tF(keepCapacity, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::getStartIndex() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa10startIndexSivg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::getEndIndex() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa8endIndexSivg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::distanceFromTo(swift::Int start, swift::Int end) const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa8distance4from2toS2i_SitF(start, end, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK T_0_0 Array<T_0_0>::operator [](swift::Int index) const SWIFT_SYMBOL("s:SayxSicig") {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  _impl::$sSayxSicig(reinterpret_cast<void *>(&returnValue), index, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
_impl::$sSayxSicig(returnValue, index, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
alignas(alignof(T_0_0)) char storage[sizeof(T_0_0)];
auto * _Nonnull storageObjectPtr = reinterpret_cast<T_0_0 *>(storage);
_impl::$sSayxSicig(storage, index, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
T_0_0 result(static_cast<T_0_0 &&>(*storageObjectPtr));
storageObjectPtr->~T_0_0();
return result;
  } else {
  T_0_0 returnValue;
_impl::$sSayxSicig(reinterpret_cast<void *>(&returnValue), index, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  return returnValue;
  }
#pragma clang diagnostic pop
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::getCount() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa5countSivg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK bool Array<T_0_0>::_hoistableIsNativeTypeChecked() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa29_hoistableIsNativeTypeCheckedSbyF(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::getCapacity() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa8capacitySivg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK String Array<T_0_0>::getDescription() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSa11descriptionSSvg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK String Array<T_0_0>::getDebugDescription() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSa16debugDescriptionSSvg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK Array<T_0_0> Array<T_0_0>::init(const Array<T_0_0>& elements) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  alignas(alignof(Array<T_0_0>)) char copyBuffer_consumedParamCopy_elements[sizeof(Array<T_0_0>)];
  auto &consumedParamCopy_elements = *(new(copyBuffer_consumedParamCopy_elements) Array<T_0_0>(elements));
  swift::_impl::ConsumedValueStorageDestroyer<Array<T_0_0>> storageGuard_consumedParamCopy_elements(consumedParamCopy_elements);
  return _impl::_impl_Array<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_void_ptr_0_8(result, _impl::$sSa12arrayLiteralSayxGxd_tcfC(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_impl::_impl_Array<T_0_0>::getOpaquePointer(consumedParamCopy_elements)), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  SWIFT_INLINE_THUNK swift::Int String_Index::getEncodedOffset() const {
  return _impl::$sSS5IndexV13encodedOffsetSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK String_Index String_Index::init(swift::Int offset) {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS5IndexV13encodedOffsetABSi_tcfC(offset));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> String_Index::init(const String_Index& sourcePosition, const String& target) {
  alignas(alignof(String)) char copyBuffer_consumedParamCopy_target[sizeof(String)];
  auto &consumedParamCopy_target = *(new(copyBuffer_consumedParamCopy_target) String(target));
  swift::_impl::ConsumedValueStorageDestroyer<String> storageGuard_consumedParamCopy_target(consumedParamCopy_target);
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS5IndexV_6withinABSgAB_SStcfC(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(sourcePosition)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(consumedParamCopy_target))));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> String_Index::samePositionIn(const UTF8View& utf8) const {
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS5IndexV12samePosition2inABSgSS8UTF8ViewV_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_UTF8View::getOpaquePointer(utf8)), _impl::swift_interop_passDirect_swift_uint64_t_0_8(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Int String_Index::getHashValue() const {
  return _impl::$sSS5IndexV9hashValueSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> String_Index::samePositionIn(const String& characters) const {
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS5IndexV12samePosition2inABSgSS_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(characters)), _impl::swift_interop_passDirect_swift_uint64_t_0_8(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> String_Index::init(const String_Index& idx, const UTF8View& target) {
  alignas(alignof(UTF8View)) char copyBuffer_consumedParamCopy_target[sizeof(UTF8View)];
  auto &consumedParamCopy_target = *(new(copyBuffer_consumedParamCopy_target) UTF8View(target));
  swift::_impl::ConsumedValueStorageDestroyer<UTF8View> storageGuard_consumedParamCopy_target(consumedParamCopy_target);
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS5IndexV_6withinABSgAB_SS8UTF8ViewVtcfC(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(idx)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_UTF8View::getOpaquePointer(consumedParamCopy_target))));
  });
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK Optional<T_0_0> Optional<T_0_0>::_impl_some::operator()(const T_0_0& val) const {
    auto result = Optional<T_0_0>::_make();
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
    void *ptr = ::swift::_impl::_impl_RefCountedClass::copyOpaquePointer(val);
    memcpy(result._getOpaquePointer(), &ptr, sizeof(ptr));
} else if constexpr (::swift::_impl::isValueType<T_0_0>) {
    alignas(T_0_0) unsigned char buffer[sizeof(T_0_0)];
    auto *valCopy = new(buffer) T_0_0(val);
    swift::_impl::implClassFor<T_0_0>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<T_0_0>::type::getOpaquePointer(*valCopy));
} else {
    memcpy(result._getOpaquePointer(), &val, sizeof(val));
}
#pragma clang diagnostic pop
    result._destructiveInjectEnumTag(0);
    return result;
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK  bool Optional<T_0_0>::isSome() const {
    return *this == Optional<T_0_0>::some;
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK T_0_0 Optional<T_0_0>::getSome() const {
    if (!isSome()) abort();
    alignas(Optional) unsigned char buffer[sizeof(Optional)];
    auto *thisCopy = new(buffer) Optional(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  returnValue = *reinterpret_cast<void **>(payloadFromDestruction);
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
  return ::swift::_impl::implClassFor<T_0_0>::type::initializeWithTake(reinterpret_cast<char * _Nonnull>(returnValue), payloadFromDestruction);
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
abort();
  } else {
  T_0_0 returnValue;
memcpy(&returnValue, payloadFromDestruction, sizeof(returnValue));
  return returnValue;
  }
#pragma clang diagnostic pop
}
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK Optional<T_0_0> Optional<T_0_0>::_impl_none::operator()() const {
    auto result = Optional<T_0_0>::_make();
    result._destructiveInjectEnumTag(1);
    return result;
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK  bool Optional<T_0_0>::isNone() const {
    return *this == Optional<T_0_0>::none;
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<T_0_0> Optional<T_0_0>::init(const T_0_0& some_) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  alignas(alignof(T_0_0)) char copyBuffer_consumedParamCopy_some[sizeof(T_0_0)];
  auto &consumedParamCopy_some = *(new(copyBuffer_consumedParamCopy_some) T_0_0(some_));
  swift::_impl::ConsumedValueStorageDestroyer<T_0_0> storageGuard_consumedParamCopy_some(consumedParamCopy_some);
  return _impl::_impl_Optional<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$sSqyxSgxcfC(result, swift::_impl::getOpaquePointer(consumedParamCopy_some), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK T_0_0 Optional<T_0_0>::getUnsafelyUnwrapped() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  _impl::$sSq17unsafelyUnwrappedxvg(reinterpret_cast<void *>(&returnValue), swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
_impl::$sSq17unsafelyUnwrappedxvg(returnValue, swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
alignas(alignof(T_0_0)) char storage[sizeof(T_0_0)];
auto * _Nonnull storageObjectPtr = reinterpret_cast<T_0_0 *>(storage);
_impl::$sSq17unsafelyUnwrappedxvg(storage, swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
T_0_0 result(static_cast<T_0_0 &&>(*storageObjectPtr));
storageObjectPtr->~T_0_0();
return result;
  } else {
  T_0_0 returnValue;
_impl::$sSq17unsafelyUnwrappedxvg(reinterpret_cast<void *>(&returnValue), swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return returnValue;
  }
#pragma clang diagnostic pop
  }
  SWIFT_INLINE_THUNK String String::init() {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sS2SycfC());
  });
  }
  SWIFT_INLINE_THUNK String_Index String::getStartIndex() const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS10startIndexSS0B0Vvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index String::getEndIndex() const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8endIndexSS0B0Vvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Int String::getCount() const {
  return _impl::$sSS5countSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK swift::Int String::distanceFromTo(const String_Index& start, const String_Index& end) const {
  return _impl::$sSS8distance4from2toSiSS5IndexV_AEtF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(start)), _impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(end)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK void String::reserveCapacity(swift::Int n) {
  return _impl::$sSS15reserveCapacityyySiF(n, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void String::append(const String& other) {
  return _impl::$sSS6appendyySSF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(other)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void String::appendContentsOf(const String& newElements) {
  return _impl::$sSS6append10contentsOfySS_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(newElements)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void String::removeAllKeepingCapacity(bool keepCapacity) {
  return _impl::$sSS9removeAll15keepingCapacityySb_tF(keepCapacity, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK UTF8View String::getUtf8() const {
  return _impl::_impl_UTF8View::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS4utf8SS8UTF8ViewVvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK void String::setUtf8(const UTF8View& newValue) {
  alignas(alignof(UTF8View)) char copyBuffer_consumedParamCopy_newValue[sizeof(UTF8View)];
  auto &consumedParamCopy_newValue = *(new(copyBuffer_consumedParamCopy_newValue) UTF8View(newValue));
  swift::_impl::ConsumedValueStorageDestroyer<UTF8View> storageGuard_consumedParamCopy_newValue(consumedParamCopy_newValue);
  return _impl::$sSS4utf8SS8UTF8ViewVvs(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_UTF8View::getOpaquePointer(consumedParamCopy_newValue)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK String String::lowercased() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS10lowercasedSSyF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String String::uppercased() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS10uppercasedSSyF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String String::getCharacters() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS10charactersSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK void String::setCharacters(const String& newValue) {
  alignas(alignof(String)) char copyBuffer_consumedParamCopy_newValue[sizeof(String)];
  auto &consumedParamCopy_newValue = *(new(copyBuffer_consumedParamCopy_newValue) String(newValue));
  swift::_impl::ConsumedValueStorageDestroyer<String> storageGuard_consumedParamCopy_newValue(consumedParamCopy_newValue);
  return _impl::$sSS10charactersSSvs(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(consumedParamCopy_newValue)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Int String::getHashValue() const {
  return _impl::$sSS9hashValueSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK bool String::isEmpty() const {
  return _impl::$sSS7isEmptySbvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK Array<uint8_t> String::get_nfcCodeUnits() const {
  return _impl::_impl_Array<uint8_t>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_void_ptr_0_8(result, _impl::$sSS13_nfcCodeUnitsSays5UInt8VGvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK void String::write(const String& other) {
  return _impl::$sSS5writeyySSF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(other)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK String String::getDebugDescription() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS16debugDescriptionSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String String::getDescription() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS11descriptionSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK bool String::hasPrefix(const String& prefix) const {
  return _impl::$sSS9hasPrefixySbSSF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(prefix)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK bool String::hasSuffix(const String& suffix) const {
  return _impl::$sSS9hasSuffixySbSSF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(suffix)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK void String::_dump() const {
  return _impl::$sSS5_dumpyyF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::getStartIndex() const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV10startIndexSS0D0Vvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::getEndIndex() const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV8endIndexSS0D0Vvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::indexAfter(const String_Index& i) const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV5index5afterSS5IndexVAF_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::indexBefore(const String_Index& i) const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV5index6beforeSS5IndexVAF_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::indexOffsetBy(const String_Index& i, swift::Int n) const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV5index_8offsetBySS5IndexVAF_SitF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), n, _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> UTF8View::indexOffsetByLimitedBy(const String_Index& i, swift::Int n, const String_Index& limit) const {
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS8UTF8ViewV5index_8offsetBy07limitedE0SS5IndexVSgAG_SiAGtF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), n, _impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(limit)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Int UTF8View::distanceFromTo(const String_Index& i, const String_Index& j) const {
  return _impl::$sSS8UTF8ViewV8distance4from2toSiSS5IndexV_AGtF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), _impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(j)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
SWIFT_INLINE_THUNK uint8_t UTF8View::operator [](const String_Index& i) const SWIFT_SYMBOL("s:SS8UTF8ViewVys5UInt8VSS5IndexVcig") {
  return _impl::$sSS8UTF8ViewVys5UInt8VSS5IndexVcig(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK String UTF8View::getDebugDescription() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS8UTF8ViewV16debugDescriptionSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String UTF8View::getDescription() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS8UTF8ViewV11descriptionSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Int UTF8View::getCount() const {
  return _impl::$sSS8UTF8ViewV5countSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!==(_:_:)'.

// Unavailable in C++: Swift operator function '%(_:_:)'.

// Unavailable in C++: Swift operator function '%=(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '===(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '??(_:_:)'.

// Unavailable in C++: Swift operator function '??(_:_:)'.

class AdditiveArithmetic { } SWIFT_UNAVAILABLE_MSG("protocol 'AdditiveArithmetic' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'AnyClass'.

class AnyKeyPath { } SWIFT_UNAVAILABLE_MSG("class 'AnyKeyPath' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'AnyObject'.

// Unavailable in C++: Swift type alias 'ArrayLiteralConvertible'.

class BidirectionalCollection { } SWIFT_UNAVAILABLE_MSG("protocol 'BidirectionalCollection' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'BidirectionalIndexable'.

// Unavailable in C++: Swift type alias 'BidirectionalSlice'.

class BinaryFloatingPoint { } SWIFT_UNAVAILABLE_MSG("protocol 'BinaryFloatingPoint' can not yet be represented in C++");

class BinaryInteger { } SWIFT_UNAVAILABLE_MSG("protocol 'BinaryInteger' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'BooleanLiteralConvertible'.

// Unavailable in C++: Swift type alias 'BooleanLiteralType'.

// Unavailable in C++: Swift type alias 'CBool'.

// Unavailable in C++: Swift type alias 'CChar'.

// Unavailable in C++: Swift type alias 'CChar16'.

// Unavailable in C++: Swift type alias 'CChar32'.

// Unavailable in C++: Swift type alias 'CDouble'.

// Unavailable in C++: Swift type alias 'CFloat'.

// Unavailable in C++: Swift type alias 'CFloat16'.

// Unavailable in C++: Swift type alias 'CInt'.

// Unavailable in C++: Swift type alias 'CLong'.

// Unavailable in C++: Swift type alias 'CLongDouble'.

// Unavailable in C++: Swift type alias 'CLongLong'.

// Unavailable in C++: Swift type alias 'CShort'.

// Unavailable in C++: Swift type alias 'CSignedChar'.

// Unavailable in C++: Swift type alias 'CUnsignedChar'.

// Unavailable in C++: Swift type alias 'CUnsignedInt'.

// Unavailable in C++: Swift type alias 'CUnsignedLong'.

// Unavailable in C++: Swift type alias 'CUnsignedLongLong'.

// Unavailable in C++: Swift type alias 'CUnsignedShort'.

class CVarArg { } SWIFT_UNAVAILABLE_MSG("protocol 'CVarArg' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'CWideChar'.

class CaseIterable { } SWIFT_UNAVAILABLE_MSG("protocol 'CaseIterable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ClosedRangeIndex'.

// Unavailable in C++: Swift type alias 'Codable'.

class CodingKey { } SWIFT_UNAVAILABLE_MSG("protocol 'CodingKey' can not yet be represented in C++");

class CodingKeyRepresentable { } SWIFT_UNAVAILABLE_MSG("protocol 'CodingKeyRepresentable' can not yet be represented in C++");

class Collection { } SWIFT_UNAVAILABLE_MSG("protocol 'Collection' can not yet be represented in C++");

class CommandLine { } SWIFT_UNAVAILABLE_MSG("enum 'CommandLine' is not yet exposed to C++");

class Comparable { } SWIFT_UNAVAILABLE_MSG("protocol 'Comparable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ConcurrentValue'.

class Copyable { } SWIFT_UNAVAILABLE_MSG("protocol 'Copyable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'CountableClosedRange'.

// Unavailable in C++: Swift type alias 'CountablePartialRangeFrom'.

// Unavailable in C++: Swift type alias 'CountableRange'.

class CustomDebugStringConvertible { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomDebugStringConvertible' can not yet be represented in C++");

class CustomLeafReflectable { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomLeafReflectable' can not yet be represented in C++");

class CustomPlaygroundDisplayConvertible { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomPlaygroundDisplayConvertible' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'CustomPlaygroundQuickLookable'.

class CustomReflectable { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomReflectable' can not yet be represented in C++");

class CustomStringConvertible { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomStringConvertible' can not yet be represented in C++");

class Decodable { } SWIFT_UNAVAILABLE_MSG("protocol 'Decodable' can not yet be represented in C++");

class Decoder { } SWIFT_UNAVAILABLE_MSG("protocol 'Decoder' can not yet be represented in C++");

class DecodingError { } SWIFT_UNAVAILABLE_MSG("enum 'DecodingError' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'DefaultBidirectionalIndices'.

// Unavailable in C++: Swift type alias 'DefaultRandomAccessIndices'.

// Unavailable in C++: Swift type alias 'DictionaryIndex'.

// Unavailable in C++: Swift type alias 'DictionaryIterator'.

// Unavailable in C++: Swift type alias 'DictionaryLiteral'.

// Unavailable in C++: Swift type alias 'DictionaryLiteralConvertible'.

class DurationProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'DurationProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'EmptyIterator'.

class Encodable { } SWIFT_UNAVAILABLE_MSG("protocol 'Encodable' can not yet be represented in C++");

class Encoder { } SWIFT_UNAVAILABLE_MSG("protocol 'Encoder' can not yet be represented in C++");

class EncodingError { } SWIFT_UNAVAILABLE_MSG("enum 'EncodingError' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'EnumeratedIterator'.

class Equatable { } SWIFT_UNAVAILABLE_MSG("protocol 'Equatable' can not yet be represented in C++");

class Escapable { } SWIFT_UNAVAILABLE_MSG("protocol 'Escapable' can not yet be represented in C++");

class ExpressibleByArrayLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByArrayLiteral' can not yet be represented in C++");

class ExpressibleByBooleanLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByBooleanLiteral' can not yet be represented in C++");

class ExpressibleByDictionaryLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByDictionaryLiteral' can not yet be represented in C++");

class ExpressibleByExtendedGraphemeClusterLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByExtendedGraphemeClusterLiteral' can not yet be represented in C++");

class ExpressibleByFloatLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByFloatLiteral' can not yet be represented in C++");

class ExpressibleByIntegerLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByIntegerLiteral' can not yet be represented in C++");

class ExpressibleByNilLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByNilLiteral' can not yet be represented in C++");

class ExpressibleByStringInterpolation { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByStringInterpolation' can not yet be represented in C++");

class ExpressibleByStringLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByStringLiteral' can not yet be represented in C++");

class ExpressibleByUnicodeScalarLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByUnicodeScalarLiteral' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ExtendedGraphemeClusterLiteralConvertible'.

// Unavailable in C++: Swift type alias 'ExtendedGraphemeClusterType'.

class FixedWidthInteger { } SWIFT_UNAVAILABLE_MSG("protocol 'FixedWidthInteger' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'FlattenBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'FlattenBidirectionalCollectionIndex'.

// Unavailable in C++: Swift type alias 'FlattenCollection'.

// Unavailable in C++: Swift type alias 'FlattenCollectionIndex'.

// Unavailable in C++: Swift type alias 'Float32'.

// Unavailable in C++: Swift type alias 'Float64'.

// Unavailable in C++: Swift type alias 'FloatLiteralConvertible'.

// Unavailable in C++: Swift type alias 'FloatLiteralType'.

class FloatingPoint { } SWIFT_UNAVAILABLE_MSG("protocol 'FloatingPoint' can not yet be represented in C++");

class FloatingPointClassification { } SWIFT_UNAVAILABLE_MSG("enum 'FloatingPointClassification' is not yet exposed to C++");

class FloatingPointRoundingRule { } SWIFT_UNAVAILABLE_MSG("enum 'FloatingPointRoundingRule' is not yet exposed to C++");

class FloatingPointSign { } SWIFT_UNAVAILABLE_MSG("enum 'FloatingPointSign' is not yet exposed to C++");

class Hashable { } SWIFT_UNAVAILABLE_MSG("protocol 'Hashable' can not yet be represented in C++");

class Identifiable { } SWIFT_UNAVAILABLE_MSG("protocol 'Identifiable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ImplicitlyUnwrappedOptional'.

// Unavailable in C++: Swift type alias 'Indexable'.

// Unavailable in C++: Swift type alias 'IndexableBase'.

class InstantProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'InstantProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'IntegerLiteralConvertible'.

// Unavailable in C++: Swift type alias 'IntegerLiteralType'.

// Unavailable in C++: Swift type alias 'IteratorOverOne'.

class IteratorProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'IteratorProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'JoinedIterator'.

class KeyPath { } SWIFT_UNAVAILABLE_MSG("generic generic class 'KeyPath' can not yet be exposed to C++");

class KeyedDecodingContainerProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'KeyedDecodingContainerProtocol' can not yet be represented in C++");

class KeyedEncodingContainerProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'KeyedEncodingContainerProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'LazyBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyCollection'.

class LazyCollectionProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'LazyCollectionProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'LazyDropWhileBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyDropWhileCollection'.

// Unavailable in C++: Swift type alias 'LazyDropWhileIndex'.

// Unavailable in C++: Swift type alias 'LazyDropWhileIterator'.

// Unavailable in C++: Swift type alias 'LazyFilterBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyFilterCollection'.

// Unavailable in C++: Swift type alias 'LazyFilterIndex'.

// Unavailable in C++: Swift type alias 'LazyFilterIterator'.

// Unavailable in C++: Swift type alias 'LazyMapBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyMapCollection'.

// Unavailable in C++: Swift type alias 'LazyMapIterator'.

// Unavailable in C++: Swift type alias 'LazyMapRandomAccessCollection'.

// Unavailable in C++: Swift type alias 'LazyPrefixWhileBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyPrefixWhileCollection'.

// Unavailable in C++: Swift type alias 'LazyPrefixWhileIndex'.

// Unavailable in C++: Swift type alias 'LazyPrefixWhileIterator'.

// Unavailable in C++: Swift type alias 'LazyRandomAccessCollection'.

class LazySequenceProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'LazySequenceProtocol' can not yet be represented in C++");

class LosslessStringConvertible { } SWIFT_UNAVAILABLE_MSG("protocol 'LosslessStringConvertible' can not yet be represented in C++");

class ManagedBuffer { } SWIFT_UNAVAILABLE_MSG("generic generic class 'ManagedBuffer' can not yet be exposed to C++");

class MemoryLayout { } SWIFT_UNAVAILABLE_MSG("generic enum 'MemoryLayout' is not yet exposed to C++");

class MirrorPath { } SWIFT_UNAVAILABLE_MSG("protocol 'MirrorPath' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'MutableBidirectionalSlice'.

class MutableCollection { } SWIFT_UNAVAILABLE_MSG("protocol 'MutableCollection' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'MutableIndexable'.

// Unavailable in C++: Swift type alias 'MutableRandomAccessSlice'.

// Unavailable in C++: Swift type alias 'MutableRangeReplaceableBidirectionalSlice'.

// Unavailable in C++: Swift type alias 'MutableRangeReplaceableRandomAccessSlice'.

// Unavailable in C++: Swift type alias 'MutableRangeReplaceableSlice'.

// Unavailable in C++: Swift type alias 'MutableSlice'.

class Never { } SWIFT_UNAVAILABLE_MSG("enum 'Never' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'NilLiteralConvertible'.

class Numeric { } SWIFT_UNAVAILABLE_MSG("protocol 'Numeric' can not yet be represented in C++");

class OptionSet { } SWIFT_UNAVAILABLE_MSG("protocol 'OptionSet' can not yet be represented in C++");

class PartialKeyPath { } SWIFT_UNAVAILABLE_MSG("generic generic class 'PartialKeyPath' can not yet be exposed to C++");

// Unavailable in C++: Swift type alias 'PlaygroundQuickLook'.

class RandomAccessCollection { } SWIFT_UNAVAILABLE_MSG("protocol 'RandomAccessCollection' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'RandomAccessIndexable'.

// Unavailable in C++: Swift type alias 'RandomAccessSlice'.

class RandomNumberGenerator { } SWIFT_UNAVAILABLE_MSG("protocol 'RandomNumberGenerator' can not yet be represented in C++");

class RangeExpression { } SWIFT_UNAVAILABLE_MSG("protocol 'RangeExpression' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'RangeReplaceableBidirectionalSlice'.

class RangeReplaceableCollection { } SWIFT_UNAVAILABLE_MSG("protocol 'RangeReplaceableCollection' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'RangeReplaceableIndexable'.

// Unavailable in C++: Swift type alias 'RangeReplaceableRandomAccessSlice'.

// Unavailable in C++: Swift type alias 'RangeReplaceableSlice'.

class RawRepresentable { } SWIFT_UNAVAILABLE_MSG("protocol 'RawRepresentable' can not yet be represented in C++");

class ReferenceWritableKeyPath { } SWIFT_UNAVAILABLE_MSG("generic generic class 'ReferenceWritableKeyPath' can not yet be exposed to C++");

class Result { } SWIFT_UNAVAILABLE_MSG("generic requirements for generic enum 'Result' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ReversedIndex'.

// Unavailable in C++: Swift type alias 'ReversedRandomAccessCollection'.

class SIMD { } SWIFT_UNAVAILABLE_MSG("protocol 'SIMD' can not yet be represented in C++");

class SIMDScalar { } SWIFT_UNAVAILABLE_MSG("protocol 'SIMDScalar' can not yet be represented in C++");

class SIMDStorage { } SWIFT_UNAVAILABLE_MSG("protocol 'SIMDStorage' can not yet be represented in C++");

class Sendable { } SWIFT_UNAVAILABLE_MSG("protocol 'Sendable' can not yet be represented in C++");

class Sequence { } SWIFT_UNAVAILABLE_MSG("protocol 'Sequence' can not yet be represented in C++");

class SetAlgebra { } SWIFT_UNAVAILABLE_MSG("protocol 'SetAlgebra' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'SetIndex'.

// Unavailable in C++: Swift type alias 'SetIterator'.

class SignedInteger { } SWIFT_UNAVAILABLE_MSG("protocol 'SignedInteger' can not yet be represented in C++");

class SignedNumeric { } SWIFT_UNAVAILABLE_MSG("protocol 'SignedNumeric' can not yet be represented in C++");

class SingleValueDecodingContainer { } SWIFT_UNAVAILABLE_MSG("protocol 'SingleValueDecodingContainer' can not yet be represented in C++");

class SingleValueEncodingContainer { } SWIFT_UNAVAILABLE_MSG("protocol 'SingleValueEncodingContainer' can not yet be represented in C++");

class Strideable { } SWIFT_UNAVAILABLE_MSG("protocol 'Strideable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'StringInterpolationConvertible'.

class StringInterpolationProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'StringInterpolationProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'StringLiteralConvertible'.

// Unavailable in C++: Swift type alias 'StringLiteralType'.

class StringProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'StringProtocol' can not yet be represented in C++");

class TextOutputStream { } SWIFT_UNAVAILABLE_MSG("protocol 'TextOutputStream' can not yet be represented in C++");

class TextOutputStreamable { } SWIFT_UNAVAILABLE_MSG("protocol 'TextOutputStreamable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'UTF16'.

// Unavailable in C++: Swift type alias 'UTF32'.

// Unavailable in C++: Swift type alias 'UTF8'.

// Unavailable in C++: Swift type alias 'UnboundedRange'.

class UnboundedRange_ { } SWIFT_UNAVAILABLE_MSG("enum 'UnboundedRange_' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'UnfoldFirstSequence'.

class Unicode { } SWIFT_UNAVAILABLE_MSG("enum 'Unicode' is not yet exposed to C++");

class UnicodeCodec { } SWIFT_UNAVAILABLE_MSG("protocol 'UnicodeCodec' can not yet be represented in C++");

class UnicodeDecodingResult { } SWIFT_UNAVAILABLE_MSG("enum 'UnicodeDecodingResult' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'UnicodeScalar'.

// Unavailable in C++: Swift type alias 'UnicodeScalarLiteralConvertible'.

// Unavailable in C++: Swift type alias 'UnicodeScalarType'.

class UnkeyedDecodingContainer { } SWIFT_UNAVAILABLE_MSG("protocol 'UnkeyedDecodingContainer' can not yet be represented in C++");

class UnkeyedEncodingContainer { } SWIFT_UNAVAILABLE_MSG("protocol 'UnkeyedEncodingContainer' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'UnsafeBufferPointerIterator'.

// Unavailable in C++: Swift type alias 'UnsafeConcurrentValue'.

// Unavailable in C++: Swift type alias 'UnsafeMutableRawBufferPointerIterator'.

// Unavailable in C++: Swift type alias 'UnsafeRawBufferPointerIterator'.

class UnsafeSendable { } SWIFT_UNAVAILABLE_MSG("protocol 'UnsafeSendable' can not yet be represented in C++");

class UnsignedInteger { } SWIFT_UNAVAILABLE_MSG("protocol 'UnsignedInteger' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'Void'.

class WritableKeyPath { } SWIFT_UNAVAILABLE_MSG("generic generic class 'WritableKeyPath' can not yet be exposed to C++");

// Unavailable in C++: Swift type alias 'Zip2Iterator'.

// Unavailable in C++: Swift global function 'abs(_:)'.

// Unavailable in C++: Swift global function 'all(_:)'.

// Unavailable in C++: Swift global function 'any(_:)'.

// Unavailable in C++: Swift global function 'assert(_:_:file:line:)'.

// Unavailable in C++: Swift global function 'assertionFailure(_:file:line:)'.

// Unavailable in C++: Swift macro 'column()'.

// Unavailable in C++: Swift global function 'debugPrint(_:separator:terminator:)'.

// Unavailable in C++: Swift global function 'debugPrint(_:separator:terminator:to:)'.

// Unavailable in C++: Swift macro 'dsohandle()'.

// Unavailable in C++: Swift global function 'dump(_:name:indent:maxDepth:maxItems:)'.

// Unavailable in C++: Swift global function 'dump(_:to:name:indent:maxDepth:maxItems:)'.

// Unavailable in C++: Swift macro 'error(_:)'.

// Unavailable in C++: Swift macro 'externalMacro(module:type:)'.

// Unavailable in C++: Swift global function 'fatalError(_:file:line:)'.

// Unavailable in C++: Swift macro 'file()'.

// Unavailable in C++: Swift macro 'fileID()'.

// Unavailable in C++: Swift macro 'filePath()'.

// Unavailable in C++: Swift macro 'function()'.

// Unavailable in C++: Swift global function 'isKnownUniquelyReferenced(_:)'.

// Unavailable in C++: Swift global function 'isKnownUniquelyReferenced(_:)'.

// Unavailable in C++: Swift macro 'line()'.

// Unavailable in C++: Swift global function 'max(_:_:)'.

// Unavailable in C++: Swift global function 'max(_:_:_:_:)'.

// Unavailable in C++: Swift global function 'min(_:_:)'.

// Unavailable in C++: Swift global function 'min(_:_:_:_:)'.

// Unavailable in C++: Swift global function 'numericCast(_:)'.

// Unavailable in C++: Swift global function 'pointwiseMax(_:_:)'.

// Unavailable in C++: Swift global function 'pointwiseMax(_:_:)'.

// Unavailable in C++: Swift global function 'pointwiseMin(_:_:)'.

// Unavailable in C++: Swift global function 'pointwiseMin(_:_:)'.

// Unavailable in C++: Swift global function 'precondition(_:_:file:line:)'.

// Unavailable in C++: Swift global function 'preconditionFailure(_:file:line:)'.

// Unavailable in C++: Swift global function 'print(_:separator:terminator:)'.

// Unavailable in C++: Swift global function 'print(_:separator:terminator:to:)'.

// Unavailable in C++: Swift global function 'readLine(strippingNewline:)'.

// Unavailable in C++: Swift global function 'repeatElement(_:count:)'.

// Unavailable in C++: Swift global function 'sequence(first:next:)'.

// Unavailable in C++: Swift global function 'sequence(state:next:)'.

// Unavailable in C++: Swift global function 'stride(from:through:by:)'.

// Unavailable in C++: Swift global function 'stride(from:to:by:)'.

// Unavailable in C++: Swift global function 'swap(_:_:)'.

// Unavailable in C++: Swift global function 'swift_unboxFromSwiftValueWithType(_:_:)'.

// Unavailable in C++: Swift global function 'transcode(_:_:_:_:stopOnError:)'.

// Unavailable in C++: Swift global function 'transcode(_:from:to:stoppingOnError:into:)'.

// Unavailable in C++: Swift global function 'type(of:)'.

// Unavailable in C++: Swift global function 'unsafeBitCast(_:to:)'.

// Unavailable in C++: Swift global function 'unsafeDowncast(_:to:)'.

// Unavailable in C++: Swift macro 'warning(_:)'.

// Unavailable in C++: Swift global function 'withExtendedLifetime(_:_:)'.

// Unavailable in C++: Swift global function 'withExtendedLifetime(_:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeBytes(of:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeBytes(of:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeMutableBytes(of:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeMutablePointer(to:_:)'.

// Unavailable in C++: Swift global function 'withUnsafePointer(to:_:)'.

// Unavailable in C++: Swift global function 'withUnsafePointer(to:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeTemporaryAllocation(byteCount:alignment:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeTemporaryAllocation(of:capacity:_:)'.

// Unavailable in C++: Swift global function 'withVaList(_:_:)'.

// Unavailable in C++: Swift global function 'withoutActuallyEscaping(_:do:)'.

// Unavailable in C++: Swift global function 'zip(_:_:)'.

// Unavailable in C++: Swift operator function '~=(_:_:)'.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
// Allow user to find the header using additional include paths
#if __has_include(<swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <swiftToCxx/_SwiftStdlibCxxOverlay.h>
// Look for the C++ interop support header relative to clang's resource dir:
//  '<toolchain>/usr/lib/clang/<version>/include/../../../swift/swiftToCxx'.
#elif __has_include(<../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#elif __has_include(<../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
//  '<toolchain>/usr/local/lib/clang/<version>/include/../../../../../lib/swift/swiftToCxx'.
#include <../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#endif
#pragma clang diagnostic pop

} // namespace swift

#pragma clang diagnostic pop
#undef SWIFT_SYMBOL
#endif // SWIFT_SWIFT_H
#ifdef SWIFT_SYMBOL
#undef SWIFT_SYMBOL
#endif
#define SWIFT_SYMBOL(usrValue) SWIFT_SYMBOL_MODULE_USR("BasicTest", usrValue)
#ifndef SWIFT_PRINTED_CORE
#define SWIFT_PRINTED_CORE
namespace swift SWIFT_PRIVATE_ATTR {

namespace _impl {

#ifdef __cplusplus
extern "C" {
#endif

// Swift type metadata response type.
struct MetadataResponseTy {
  void * _Null_unspecified _0;
  uint64_t _1;
};
// Swift type metadata request type.
typedef uint64_t MetadataRequestTy;

#if __cplusplus > 201402L
#  define SWIFT_NOEXCEPT_FUNCTION_PTR noexcept
#else
#  define SWIFT_NOEXCEPT_FUNCTION_PTR
#endif

using ValueWitnessInitializeBufferWithCopyOfBufferTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(55882))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessDestroyTy = void(* __ptrauth_swift_value_witness_function_pointer(1272))(void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessInitializeWithCopyTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(58298))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessAssignWithCopyTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(34641))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessInitializeWithTakeTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(18648))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessAssignWithTakeTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(61402))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessGetEnumTagSinglePayloadTy = unsigned(* __ptrauth_swift_value_witness_function_pointer(24816))(const void * _Nonnull, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessStoreEnumTagSinglePayloadTy = void(* __ptrauth_swift_value_witness_function_pointer(41169))(void * _Nonnull, unsigned, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;

struct ValueWitnessTable {
  ValueWitnessInitializeBufferWithCopyOfBufferTy _Nonnull initializeBufferWithCopyOfBuffer;
  ValueWitnessDestroyTy _Nonnull destroy;
  ValueWitnessInitializeWithCopyTy _Nonnull initializeWithCopy;
  ValueWitnessAssignWithCopyTy _Nonnull assignWithCopy;
  ValueWitnessInitializeWithTakeTy _Nonnull initializeWithTake;
  ValueWitnessAssignWithTakeTy _Nonnull assignWithTake;
  ValueWitnessGetEnumTagSinglePayloadTy _Nonnull getEnumTagSinglePayload;
  ValueWitnessStoreEnumTagSinglePayloadTy _Nonnull storeEnumTagSinglePayload;
  size_t size;
  size_t stride;
  unsigned flags;
  unsigned extraInhabitantCount;

  constexpr size_t getAlignment() const { return (flags & 255) + 1; }
};

using EnumValueWitnessGetEnumTagTy = unsigned(* __ptrauth_swift_value_witness_function_pointer(41909))(const void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using EnumValueWitnessDestructiveProjectEnumDataTy = void(* __ptrauth_swift_value_witness_function_pointer(1053))(void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using EnumValueWitnessDestructiveInjectEnumTagTy = void(* __ptrauth_swift_value_witness_function_pointer(45796))(void * _Nonnull, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;

struct EnumValueWitnessTable {
  ValueWitnessTable vwTable;
  EnumValueWitnessGetEnumTagTy _Nonnull getEnumTag;
  EnumValueWitnessDestructiveProjectEnumDataTy _Nonnull destructiveProjectEnumData;
  EnumValueWitnessDestructiveInjectEnumTagTy _Nonnull destructiveInjectEnumTag;
};

#undef SWIFT_NOEXCEPT_FUNCTION_PTR


// type metadata address for Bool.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSbN;
// type metadata address for Int8.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss4Int8VN;
// type metadata address for UInt8.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5UInt8VN;
// type metadata address for Int16.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int16VN;
// type metadata address for UInt16.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt16VN;
// type metadata address for Int32.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int32VN;
// type metadata address for UInt32.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt32VN;
// type metadata address for Int64.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int64VN;
// type metadata address for UInt64.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt64VN;
// type metadata address for Float.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSfN;
// type metadata address for Double.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSdN;
// type metadata address for OpaquePointer.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss13OpaquePointerVN;

#ifdef __cplusplus
}
#endif


} // namespace _impl


#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<bool> = true;

template<>
struct TypeMetadataTrait<bool> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSbN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int8_t> = true;

template<>
struct TypeMetadataTrait<int8_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss4Int8VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint8_t> = true;

template<>
struct TypeMetadataTrait<uint8_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5UInt8VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int16_t> = true;

template<>
struct TypeMetadataTrait<int16_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int16VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint16_t> = true;

template<>
struct TypeMetadataTrait<uint16_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt16VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int32_t> = true;

template<>
struct TypeMetadataTrait<int32_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int32VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint32_t> = true;

template<>
struct TypeMetadataTrait<uint32_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt32VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int64_t> = true;

template<>
struct TypeMetadataTrait<int64_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int64VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint64_t> = true;

template<>
struct TypeMetadataTrait<uint64_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt64VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<float> = true;

template<>
struct TypeMetadataTrait<float> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSfN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<double> = true;

template<>
struct TypeMetadataTrait<double> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSdN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<void *> = true;

template<>
struct TypeMetadataTrait<void *> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss13OpaquePointerVN;
  }
};

#pragma clang diagnostic pop

} // namespace swift

#endif
#endif
#ifdef __cplusplus
namespace BasicTest SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BasicTest") {
namespace _impl {
extern "C" {
#endif

SWIFT_EXTERN void * _Nonnull $s9BasicTest8APIClassCACycfC(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // init()
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_BasicTest_uint64_t_0_8_void_ptr_8_16 {
  uint64_t _1;
  void * _Nullable _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_BasicTest_uint64_t_0_8_void_ptr_8_16(char * _Nonnull result, struct swift_interop_returnStub_BasicTest_uint64_t_0_8_void_ptr_8_16 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_BasicTest_uint64_t_0_8_void_ptr_8_16 $s9BasicTest8APIClassC4textSSvg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_BasicTest_uint64_t_0_8_void_ptr_8_16 {
  uint64_t _1;
  void * _Nullable _2;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_BasicTest_uint64_t_0_8_void_ptr_8_16 swift_interop_passDirect_BasicTest_uint64_t_0_8_void_ptr_8_16(const char * _Nonnull value) {
  struct swift_interop_passStub_BasicTest_uint64_t_0_8_void_ptr_8_16 result;
  memcpy(&result._1, value + 0, 8);
  memcpy(&result._2, value + 8, 8);
  return result;
}

SWIFT_EXTERN struct swift_interop_returnStub_BasicTest_uint64_t_0_8_void_ptr_8_16 $s9BasicTest8APIClassC8sayHello2toS2S_tF(struct swift_interop_passStub_BasicTest_uint64_t_0_8_void_ptr_8_16 name, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // sayHello(to:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_BasicTest_uint8_t_0_1 {
  uint8_t _1;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_BasicTest_uint8_t_0_1(char * _Nonnull result, struct swift_interop_returnStub_BasicTest_uint8_t_0_1 value) {
  memcpy(result + 0, &value._1, 1);
}

// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_BasicTest_uint8_t_0_1 {
  uint8_t _1;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_BasicTest_uint8_t_0_1 swift_interop_passDirect_BasicTest_uint8_t_0_1(const char * _Nonnull value) {
  struct swift_interop_passStub_BasicTest_uint8_t_0_1 result;
  memcpy(&result._1, value + 0, 1);
  return result;
}

SWIFT_EXTERN struct swift_interop_returnStub_BasicTest_uint8_t_0_1 $s9BasicTest8APIClassC6doWork4withAA9APIStructVAG_tF(struct swift_interop_passStub_BasicTest_uint8_t_0_1 structValue, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // doWork(with:)
SWIFT_EXTERN struct swift_interop_returnStub_BasicTest_uint8_t_0_1 $s9BasicTest7APIEnumO8rawValueACSgSi_tcfC(ptrdiff_t rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN ptrdiff_t $s9BasicTest7APIEnumO8rawValueSivg(struct swift_interop_passStub_BasicTest_uint8_t_0_1 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
struct BasicTest_APIEnum {
  _Alignas(1) char _storage[1];
};

SWIFT_EXTERN struct swift_interop_returnStub_BasicTest_uint8_t_0_1 $s9BasicTest9APIStructV9enumValueAA7APIEnumOvg(struct swift_interop_passStub_BasicTest_uint8_t_0_1 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BasicTest_uint8_t_0_1 $s9BasicTest9APIStructV9enumValueAcA7APIEnumO_tcfC(struct swift_interop_passStub_BasicTest_uint8_t_0_1 enumValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(enumValue:)
struct BasicTest_APIStruct {
  _Alignas(1) char _storage[1];
};


#ifdef __cplusplus
}
}
}
namespace BasicTest SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BasicTest") {

class SWIFT_SYMBOL("s:9BasicTest9APIStructV") APIStruct;
} // end namespace

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BasicTest::APIStruct> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BasicTest SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BasicTest") {

class SWIFT_SYMBOL("s:9BasicTest8APIClassC") APIClass;
} // end namespace

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BasicTest::APIClass> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BasicTest SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BasicTest") {
namespace _impl {

class _impl_APIClass;
// Type metadata accessor for APIClass
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s9BasicTest8APIClassCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:9BasicTest8APIClassC") APIClass : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
  static SWIFT_INLINE_THUNK APIClass init() SWIFT_SYMBOL("s:9BasicTest8APIClassCACycfc");
  SWIFT_INLINE_THUNK swift::String getText() SWIFT_SYMBOL("s:9BasicTest8APIClassC4textSSvp");
  SWIFT_INLINE_THUNK swift::String sayHello(const swift::String& name) SWIFT_SYMBOL("s:9BasicTest8APIClassC8sayHello2toS2S_tF");
  SWIFT_INLINE_THUNK APIStruct doWork(const APIStruct& structValue) SWIFT_SYMBOL("s:9BasicTest8APIClassC6doWork4withAA9APIStructVAG_tF");
protected:
  SWIFT_INLINE_THUNK APIClass(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_APIClass;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s9BasicTest8APIClassCD;
  static inline constexpr $s9BasicTest8APIClassCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_APIClass {
public:
static SWIFT_INLINE_THUNK APIClass makeRetained(void * _Nonnull ptr) noexcept { return APIClass(ptr); }
};

} // namespace _impl

} // end namespace

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BasicTest::APIClass> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BasicTest::_impl::$s9BasicTest8APIClassCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<BasicTest::APIClass> { using type = BasicTest::_impl::_impl_APIClass; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BasicTest SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BasicTest") {

class SWIFT_SYMBOL("s:9BasicTest7APIEnumO") APIEnum;
} // end namespace

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BasicTest::APIEnum> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BasicTest SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BasicTest") {
namespace _impl {

class _impl_APIEnum;

// Type metadata accessor for APIEnum
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s9BasicTest7APIEnumOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:9BasicTest7APIEnumO") APIEnum final {
public:
  SWIFT_INLINE_THUNK ~APIEnum() noexcept {
    auto metadata = _impl::$s9BasicTest7APIEnumOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK APIEnum(const APIEnum &other) noexcept {
    auto metadata = _impl::$s9BasicTest7APIEnumOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK APIEnum &operator =(const APIEnum &other) noexcept {
    auto metadata = _impl::$s9BasicTest7APIEnumOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK APIEnum &operator =(APIEnum &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER APIEnum(APIEnum &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    caseOne SWIFT_SYMBOL("s:9BasicTest7APIEnumO7caseOneyA2CmF"),
    caseTwo SWIFT_SYMBOL("s:9BasicTest7APIEnumO7caseTwoyA2CmF")
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_caseOne {  // impl struct for case caseOne
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::caseOne;
    }
    SWIFT_INLINE_THUNK APIEnum operator()() const;
  } caseOne SWIFT_SYMBOL("s:9BasicTest7APIEnumO7caseOneyA2CmF");
  SWIFT_INLINE_THUNK bool isCaseOne() const;

  inline const static struct _impl_caseTwo {  // impl struct for case caseTwo
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::caseTwo;
    }
    SWIFT_INLINE_THUNK APIEnum operator()() const;
  } caseTwo SWIFT_SYMBOL("s:9BasicTest7APIEnumO7caseTwoyA2CmF");
  SWIFT_INLINE_THUNK bool isCaseTwo() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    switch (_getEnumTag()) {
      case 0: return cases::caseOne;
      case 1: return cases::caseTwo;
      default: abort();
    }
  }

  static SWIFT_INLINE_THUNK swift::Optional<APIEnum> init(swift::Int rawValue) SWIFT_SYMBOL("s:9BasicTest7APIEnumO8rawValueACSgSi_tcfc");
  SWIFT_INLINE_THUNK swift::Int getRawValue() const SWIFT_SYMBOL("s:9BasicTest7APIEnumO8rawValueSivp");
private:
  SWIFT_INLINE_THUNK APIEnum() noexcept {}
  static SWIFT_INLINE_THUNK APIEnum _make() noexcept { return APIEnum(); }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage; }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage; }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s9BasicTest7APIEnumOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s9BasicTest7APIEnumOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s9BasicTest7APIEnumOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  alignas(1) char _storage[1];
  friend class _impl::_impl_APIEnum;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s9BasicTest7APIEnumOD;
  static inline constexpr $s9BasicTest7APIEnumOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_APIEnum {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(APIEnum &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const APIEnum &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER APIEnum returnNewValue(T callable) {
    auto result = APIEnum::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s9BasicTest7APIEnumOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BasicTest::APIEnum> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BasicTest::_impl::$s9BasicTest7APIEnumOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BasicTest::APIEnum> = true;
template<>
struct implClassFor<BasicTest::APIEnum> { using type = BasicTest::_impl::_impl_APIEnum; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BasicTest SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BasicTest") {

namespace _impl {

class _impl_APIStruct;

// Type metadata accessor for APIStruct
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s9BasicTest9APIStructVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:9BasicTest9APIStructV") APIStruct final {
public:
  SWIFT_INLINE_THUNK ~APIStruct() noexcept {
    auto metadata = _impl::$s9BasicTest9APIStructVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK APIStruct(const APIStruct &other) noexcept {
    auto metadata = _impl::$s9BasicTest9APIStructVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK APIStruct &operator =(const APIStruct &other) noexcept {
    auto metadata = _impl::$s9BasicTest9APIStructVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK APIStruct &operator =(APIStruct &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER APIStruct(APIStruct &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK APIEnum getEnumValue() const SWIFT_SYMBOL("s:9BasicTest9APIStructV9enumValueAA7APIEnumOvp");
  static SWIFT_INLINE_THUNK APIStruct init(const APIEnum& enumValue) SWIFT_SYMBOL("s:9BasicTest9APIStructV9enumValueAcA7APIEnumO_tcfc");
private:
  SWIFT_INLINE_THUNK APIStruct() noexcept {}
  static SWIFT_INLINE_THUNK APIStruct _make() noexcept { return APIStruct(); }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage; }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage; }

  alignas(1) char _storage[1];
  friend class _impl::_impl_APIStruct;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s9BasicTest9APIStructVD;
  static inline constexpr $s9BasicTest9APIStructVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_APIStruct {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(APIStruct &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const APIStruct &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER APIStruct returnNewValue(T callable) {
    auto result = APIStruct::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s9BasicTest9APIStructVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BasicTest::APIStruct> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BasicTest::_impl::$s9BasicTest9APIStructVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BasicTest::APIStruct> = true;
template<>
struct implClassFor<BasicTest::APIStruct> { using type = BasicTest::_impl::_impl_APIStruct; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BasicTest SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BasicTest") {

  SWIFT_INLINE_THUNK APIClass APIClass::init() {
  return _impl::_impl_APIClass::makeRetained(_impl::$s9BasicTest8APIClassCACycfC(swift::TypeMetadataTrait<APIClass>::getTypeMetadata()));
  }
  SWIFT_INLINE_THUNK swift::String APIClass::getText() {
void ***selfPtr_ = reinterpret_cast<void ***>( ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
#ifdef __arm64e__
void **vtable_ = ptrauth_auth_data(*selfPtr_, ptrauth_key_process_independent_data, ptrauth_blend_discriminator(selfPtr_,27361));
#else
void **vtable_ = *selfPtr_;
#endif
struct FTypeAddress {
decltype(_impl::$s9BasicTest8APIClassC4textSSvg) * func;
};
FTypeAddress *fptrptr_ = reinterpret_cast<FTypeAddress *>(vtable_ + 64 / sizeof(void *));
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BasicTest_uint64_t_0_8_void_ptr_8_16(result, (* fptrptr_->func)(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  });
  }
  SWIFT_INLINE_THUNK swift::String APIClass::sayHello(const swift::String& name) {
void ***selfPtr_ = reinterpret_cast<void ***>( ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
#ifdef __arm64e__
void **vtable_ = ptrauth_auth_data(*selfPtr_, ptrauth_key_process_independent_data, ptrauth_blend_discriminator(selfPtr_,27361));
#else
void **vtable_ = *selfPtr_;
#endif
struct FTypeAddress {
decltype(_impl::$s9BasicTest8APIClassC8sayHello2toS2S_tF) * func;
};
FTypeAddress *fptrptr_ = reinterpret_cast<FTypeAddress *>(vtable_ + 72 / sizeof(void *));
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BasicTest_uint64_t_0_8_void_ptr_8_16(result, (* fptrptr_->func)(_impl::swift_interop_passDirect_BasicTest_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(name)), ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  });
  }
  SWIFT_INLINE_THUNK APIStruct APIClass::doWork(const APIStruct& structValue) {
void ***selfPtr_ = reinterpret_cast<void ***>( ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
#ifdef __arm64e__
void **vtable_ = ptrauth_auth_data(*selfPtr_, ptrauth_key_process_independent_data, ptrauth_blend_discriminator(selfPtr_,27361));
#else
void **vtable_ = *selfPtr_;
#endif
struct FTypeAddress {
decltype(_impl::$s9BasicTest8APIClassC6doWork4withAA9APIStructVAG_tF) * func;
};
FTypeAddress *fptrptr_ = reinterpret_cast<FTypeAddress *>(vtable_ + 80 / sizeof(void *));
  return _impl::_impl_APIStruct::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BasicTest_uint8_t_0_1(result, (* fptrptr_->func)(_impl::swift_interop_passDirect_BasicTest_uint8_t_0_1(_impl::_impl_APIStruct::getOpaquePointer(structValue)), ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  });
  }
  SWIFT_INLINE_THUNK APIEnum APIEnum::_impl_caseOne::operator()() const {
    auto result = APIEnum::_make();
    result._destructiveInjectEnumTag(0);
    return result;
  }
  SWIFT_INLINE_THUNK  bool APIEnum::isCaseOne() const {
    return *this == APIEnum::caseOne;
  }
  SWIFT_INLINE_THUNK APIEnum APIEnum::_impl_caseTwo::operator()() const {
    auto result = APIEnum::_make();
    result._destructiveInjectEnumTag(1);
    return result;
  }
  SWIFT_INLINE_THUNK  bool APIEnum::isCaseTwo() const {
    return *this == APIEnum::caseTwo;
  }
  SWIFT_INLINE_THUNK swift::Optional<APIEnum> APIEnum::init(swift::Int rawValue) {
  return swift::_impl::_impl_Optional<APIEnum>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BasicTest_uint8_t_0_1(result, _impl::$s9BasicTest7APIEnumO8rawValueACSgSi_tcfC(rawValue));
  });
  }
  SWIFT_INLINE_THUNK swift::Int APIEnum::getRawValue() const {
  return _impl::$s9BasicTest7APIEnumO8rawValueSivg(_impl::swift_interop_passDirect_BasicTest_uint8_t_0_1(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK APIEnum APIStruct::getEnumValue() const {
  return _impl::_impl_APIEnum::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BasicTest_uint8_t_0_1(result, _impl::$s9BasicTest9APIStructV9enumValueAA7APIEnumOvg(_impl::swift_interop_passDirect_BasicTest_uint8_t_0_1(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK APIStruct APIStruct::init(const APIEnum& enumValue) {
  return _impl::_impl_APIStruct::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BasicTest_uint8_t_0_1(result, _impl::$s9BasicTest9APIStructV9enumValueAcA7APIEnumO_tcfC(_impl::swift_interop_passDirect_BasicTest_uint8_t_0_1(_impl::_impl_APIEnum::getOpaquePointer(enumValue))));
  });
  }

class APIProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'APIProtocol' can not yet be represented in C++");

} // namespace BasicTest

#undef SWIFT_SYMBOL
#endif
#pragma clang diagnostic pop
#endif
